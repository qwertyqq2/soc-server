// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package apigroup

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ApigroupMetaData contains all meta data concerning the Apigroup contract.
var ApigroupMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lotSnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"}],\"name\":\"BuyLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"CreateRoundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"}],\"name\":\"CreatedLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"EnterRoundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeFirst\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lotSnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"}],\"name\":\"NewLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SposDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SnegDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_psnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"}],\"name\":\"ReceiveLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receiveTokens\",\"type\":\"uint256\"}],\"name\":\"SendLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxRange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_psnap\",\"type\":\"uint256\"}],\"name\":\"StartRoundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nwin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_spos\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sneg\",\"type\":\"uint256\"}],\"name\":\"UpdatePlayerParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_psnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofEPData\",\"type\":\"bytes\"}],\"name\":\"BuyLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CreateLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"CreateRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proofEPData\",\"type\":\"bytes\"}],\"name\":\"GetProofEp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"}],\"name\":\"GetProofResNewLot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initParamsData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"}],\"name\":\"NewLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initParamsData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"playerParamsData\",\"type\":\"bytes\"}],\"name\":\"ReceiveLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initParamsData\",\"type\":\"bytes\"}],\"name\":\"SendLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"playerParamsData\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561559b806100326000396000f3fe60806040526004361061009c5760003560e01c806370ebfc2d1161006457806370ebfc2d1461014c578063aa7d75681461016c578063c900188414610181578063d224efc8146101a1578063d53e743e146101c1578063f9c2b922146101d657600080fd5b80631097e579146100a1578063257b6e0c146100ab57806335817e92146100cb5780635be4a96c1461010c5780635ebb86c01461012c575b600080fd5b6100a96101f6565b005b3480156100b757600080fd5b506100a96100c6366004611385565b6102de565b3480156100d757600080fd5b506100eb6100e636600461148c565b6103c5565b60408051931515845260208401929092529082015260600160405180910390f35b34801561011857600080fd5b506100a96101273660046114e1565b6104d6565b34801561013857600080fd5b506100a9610147366004611557565b6106cd565b34801561015857600080fd5b506100a96101673660046114e1565b61081c565b34801561017857600080fd5b506100a9610a38565b34801561018d57600080fd5b506100a961019c3660046115a7565b610b1e565b3480156101ad57600080fd5b506100a96101bc366004611655565b610fe1565b3480156101cd57600080fd5b506100a96111a9565b3480156101e257600080fd5b506100eb6101f13660046116af565b611264565b600154604051631fb4892960e01b81523360048201523460248201526001600160a01b03909116908190631fb4892990604401600060405180830381600087803b15801561024357600080fd5b505af1158015610257573d6000803e3d6000fd5b50506001546040516001600160a01b0390911692503480156108fc029250906000818181858888f19350505050158015610295573d6000803e3d6000fd5b50600154604080516001600160a01b0390921682523360208301527fc27ed72edbb571182c3c5aa21b035674fc49c06957440f22d55f7e2bf00f3180910160405180910390a150565b6000546001600160a01b031633146103345760405162461bcd60e51b81526020600482015260146024820152732cb7bab03932903737ba103a34329037bbb732b960611b60448201526064015b60405180910390fd5b60008160405161034390611377565b908152602001604051809103906000f080158015610365573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03831690811790915560408051918252602082018590529192507ff901c2f537cd421ec196e0b11577d59e041a570ece9cdca8a901ddd7f20b425491015b60405180910390a15050565b600154604051637479a71760e01b8152600091829182916001600160a01b031690829073__$02cb286b575382a609bf5f0a09d5c56ef2$__90637479a71790610412908990600401611722565b61010060405180830381865af4158015610430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104549190611765565b338152604051630af4f46d60e11b81529091506001600160a01b038316906315e9e8da90610486908490600401611862565b606060405180830381865afa1580156104a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c79190611877565b94509450945050509193909250565b60405163f136b3a960e01b815260009073__$02cb286b575382a609bf5f0a09d5c56ef2$__9063f136b3a990610510908690600401611722565b61010060405180830381865af415801561052e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105529190611765565b338152604051630d5c8d7960e31b815290915060009073__$02cb286b575382a609bf5f0a09d5c56ef2$__90636ae46bc890610592908690600401611722565b606060405180830381865af41580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d391906118b3565b600154604051635eb73f8160e01b81529192506001600160a01b03169060009081908390635eb73f819061060f908b90899089906004016118f7565b60408051808303816000875af115801561062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106519190611941565b600154602088810151604080516001600160a01b039485168152938e1692840192909252339183019190915260608201526080810183905260a0810182905291935091507f4fc33a0e6a259fb2ce75e5cbd9fdde7d4eefdaac773afbd1a02c1f2fdb2c66f99060c0015b60405180910390a15050505050505050565b604051630f7846b960e11b815260009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90631ef08d7290610707908590600401611722565b606060405180830381865af4158015610724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107489190611965565b60015460405163066cf8af60e01b81529192506001600160a01b031690600090829063066cf8af9061078090889087906004016119a1565b6020604051808303816000875af115801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c391906119d9565b600154604080516001600160a01b039283168152918816602083015281018290529091507f7c63f4ca5f3947a628e97b9822a09acf9382a1c3916ccbf7493097dc2f081ecf906060015b60405180910390a15050505050565b3361085a5760405162461bcd60e51b815260206004820152600e60248201526d14d95b99195c881a5b881b9d5b1b60921b604482015260640161032b565b604051637479a71760e01b815260009073__$02cb286b575382a609bf5f0a09d5c56ef2$__90637479a71790610894908590600401611722565b61010060405180830381865af41580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d69190611765565b338152604051630f7846b960e11b815290915060009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90631ef08d7290610916908790600401611722565b606060405180830381865af4158015610933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109579190611965565b600154604051632d5c7a1f60e21b81529192506001600160a01b0316906000908190839063b571e87c90610993908b9088908a906004016119f2565b60408051808303816000875af11580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d59190611941565b6001548651602080890151908a01516040808b015190519698509496507f0ec6421e5db42f49d5bc9b51a59d5babed4e72573d1b56303b98a9496e3be021956106bb956001600160a01b03909516948f943394909390929091908b908b90611a31565b6000600160009054906101000a90046001600160a01b03169050600080600080846001600160a01b031663aa7d75686040518163ffffffff1660e01b81526004016080604051808303816000875af1158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc9190611a81565b600154604080516001600160a01b0390921682526020820186905281018490526060810183905260808101829052919750955091935091507fd3eab242dde95a503acc5d1b4e71fcd552c598a697249c87a38b48333e63c6479060a00161080d565b604051630f7846b960e11b815260009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90631ef08d7290610b58908790600401611722565b606060405180830381865af4158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b999190611965565b9050600073__$02cb286b575382a609bf5f0a09d5c56ef2$__63269940a7856040518263ffffffff1660e01b8152600401610bd49190611722565b61010060405180830381865af4158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c169190611765565b6001600160a01b03871681526040516375543f1160e01b815290915060009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__906375543f1190610c5f908790600401611722565b60c060405180830381865af4158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190611ab7565b6001546040516352ec20d360e01b81529192506001600160a01b03169060609060009083906352ec20d390610cdf908e908a908a908a90600401611b7a565b6000604051808303816000875af1158015610cfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d269190810190611bd0565b604051632f131de960e01b8152919350915060009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90632f131de990610d65908690600401611722565b60c060405180830381865af4158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190611ab7565b60015481516020808401516040808601516060808801516080808a015185516001600160a01b039a8b1681529990981696890196909652878401949094528601529184015260a0830191909152519192507f549bf9b2e230d5c7984eceaafcffe0407f05426c6cc61641bad8e2cd415ff461919081900360c00190a16000846001600160a01b031663ecd0b5e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8691906119d9565b90506000856001600160a01b031663d571d9de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eec91906119d9565b90507f7d47cd57bf3877d2dc4c47f28fce9a4ce01fcf971cdf66f76b40e4890c2dbd5b600160009054906101000a90046001600160a01b03168f8f878b606001518860600151610f3c9190611c51565b8c608001518960800151610f509190611c51565b8c6001600160a01b0316635fa2a2476040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb291906119d9565b888a604051610fc999989796959493929190611a31565b60405180910390a15050505050505050505050505050565b60405163269940a760e01b815260009073__$02cb286b575382a609bf5f0a09d5c56ef2$__9063269940a79061101b908690600401611722565b61010060405180830381865af4158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d9190611765565b3381526040516375543f1160e01b815290915060009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__906375543f119061109d908690600401611722565b60c060405180830381865af41580156110ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110de9190611ab7565b60015460405163493514b360e01b81529192506001600160a01b0316906000908190839063493514b3906111189087908990600401611c72565b60408051808303816000875af1158015611136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115a9190611941565b604080513381526020810184905290810182905291935091507f5bb95829671915ece371da722f91d5371159095dcabf2f75cd6c53facb7e1bab9060600160405180910390a150505050505050565b60015460408051636a9f3a1f60e11b815290516001600160a01b0390921691600091839163d53e743e91600480820192602092909190829003018187875af11580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190611c8e565b600154604080516001600160a01b03928316815291831660208301529192507f918ba15a8dc4906fa0a8ac698245a6a565c4724cf9a27b8be97bf3af6e31503591016103b9565b600154604051630d5c8d7960e31b8152600091829182916001600160a01b031690829073__$02cb286b575382a609bf5f0a09d5c56ef2$$02cb286b575382a609bf5f0a09d5c56ef2$__63893780c9866040518263ffffffff1660e01b8152600401620005e29190620023df565b602060405180830381865af415801562000600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200062691906200235b565b9050600954811480156200064257508460800135856020013511155b156200065957600954600194509250905062000665565b60095460009450925090505b9193909250565b6003546001600160a01b03163314620006995760405162461bcd60e51b8152600401620003789062002324565b600654811015620006e25760405162461bcd60e51b8152602060048201526012602482015271139bdd08195b9bdd5d1a0819195c1bdcda5d60721b604482015260640162000378565b6001600160a01b038216600090815260046020526040812080548392906200070c9084906200240c565b9091555050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b03939093169290921790915550565b60035460009081906001600160a01b03163314620007975760405162461bcd60e51b8152600401620003789062002324565b600e54600254620007a991906200240c565b4211620007eb5760405162461bcd60e51b815260206004820152600f60248201526e697420697320746f6f206561726c7960881b604482015260640162000378565b6000600860009054906101000a90046001600160a01b0316905060006064600b548760600135846001600160a01b0316639caf34c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200087691906200235b565b6200088390606462002422565b6200088f919062002422565b6200089b91906200243c565b620008a791906200243c565b604051632e1a7d4d60e01b8152600481018290529091506001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b158015620008ed57600080fd5b505af115801562000902573d6000803e3d6000fd5b505060405133925083156108fc02915083906000818181858888f1935050505015801562000934573d6000803e3d6000fd5b506040516302da6f8f60e51b815260009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90635b4df1e09062000971908a906004016200245f565b602060405180830381865af41580156200098f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009b591906200235b565b604051639ed41ba160e01b815260a089013560048201526024810182905290915073__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af415801562000a13573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a3991906200235b565b60405160200162000a4c91815260200190565b60408051601f198184030181529181528151602092830120600a5573__$61628a1579421b817451ee241d1ca321f8$__91639ed41ba1918901359062000a95908b018b620024b1565b604080516001600160a01b0392909216602083015260009082015260600160408051601f198184030181529082905280516020909101206001600160e01b031960e085901b16825262000af49291600401918252602082015260400190565b602060405180830381865af415801562000b12573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b3891906200235b565b60405160200162000b4b91815260200190565b60408051808303601f1901815291905280516020909101206009819055600a549890975095505050505050565b60035460609060009081906001600160a01b0316331462000bad5760405162461bcd60e51b8152600401620003789062002324565b600854604051635d961fe960e11b81526001600160a01b039182169189919082169063bb2c3fd29062000be7908b908b90600401620024cf565b600060405180830381600087803b15801562000c0257600080fd5b505af115801562000c17573d6000803e3d6000fd5b505050506000816001600160a01b03166352c4d14c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c8291906200235b565b604051636a79fb8d60e01b8152600481018290529091506001600160a01b03841690636a79fb8d906024016020604051808303816000875af115801562000ccd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cf391906200235b565b50826001600160a01b0316639caf34c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5991906200235b565b935060008960400135846001600160a01b0316639caf34c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000da1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dc791906200235b565b62000dd39190620024fb565b9050600080821262000fc15781600b600082825462000df391906200240c565b9091555062000e0a905060808b01358a8462001d7a565b99509750905073__$61628a1579421b817451ee241d1ca321f8$__639ed41ba160408c013562000e3e60208d018d620024b1565b604080516001600160a01b0392909216602083015281018b905260600160408051601f198184030181529082905280516020909101206001600160e01b031960e085901b16825262000e9c9291600401918252602082015260400190565b602060405180830381865af415801562000eba573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ee091906200235b565b60405160200162000ef391815260200190565b60408051808303601f19018152908290528051602090910120600955639ed41ba160e01b815260a08a013560048201526024810182905273__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af415801562000f67573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f8d91906200235b565b60405160200162000fa091815260200190565b60408051601f198184030181529190528051602090910120600a556200128c565b604051633860bdb560e11b81526004810183905273__$61628a1579421b817451ee241d1ca321f8$__906370c17b6a90602401602060405180830381865af415801562001012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200103891906200235b565b600c60008282546200104b91906200240c565b9091555050604051633860bdb560e11b815260048101839052620010da9060808c0135908b9073__$61628a1579421b817451ee241d1ca321f8$__906370c17b6a90602401602060405180830381865af4158015620010ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010d491906200235b565b62001eb2565b99509750905073__$61628a1579421b817451ee241d1ca321f8$__639ed41ba160408c01356200110e60208d018d620024b1565b604080516001600160a01b0392909216602083015281018b905260600160408051601f198184030181529082905280516020909101206001600160e01b031960e085901b1682526200116c9291600401918252602082015260400190565b602060405180830381865af41580156200118a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011b091906200235b565b604051602001620011c391815260200190565b60408051808303601f19018152908290528051602090910120600955639ed41ba160e01b815260a08a013560048201526024810182905273__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af415801562001237573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200125d91906200235b565b6040516020016200127091815260200190565b60408051601f198184030181529190528051602090910120600a555b50505050509450945094915050565b60035460009081906001600160a01b03163314620012cd5760405162461bcd60e51b8152600401620003789062002324565b8460006001600160a01b03821663a8fda779620012ee6020890189620024b1565b8860200135886040518463ffffffff1660e01b8152600401620013149392919062002550565b6020604051808303816000875af115801562001334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200135a91906200235b565b905073__$c7f8f94eeb4eceb1b6560c0bf9c7729f47$__63ac6ca285620013856020890189620024b1565b6200139760e08a0160c08b01620024b1565b60405160e084811b6001600160e01b03191682526001600160a01b03938416600483015291909216602483015260808a01356044830152890135606482015260208901356084820152606089013560a482015260c401602060405180830381865af41580156200140b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200143191906200235b565b60098190559097909650945050505050565b6008546040805163272bcd3160e21b815290516000926001600160a01b0316918291639caf34c4916004808201926020929091908290030181865afa15801562001491573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014b791906200235b565b91505090565b6040516313f7871b60e11b81526000908190819086906001600160a01b038216906327ef0e3690620014f69088908a906004016200257e565b606060405180830381865afa15801562001514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200153a91906200259b565b9350935093505093509350939050565b6040516bffffffffffffffffffffffff19606087901b1660208201526034810185905260548101849052607481018390526094810182905260009060b40160408051601f1981840301815291905280516020909101209695505050505050565b6003546000908190819081906001600160a01b03163314620015e05760405162461bcd60e51b8152600401620003789062002324565b60005b60055460ff821610156200183c5773__$61628a1579421b817451ee241d1ca321f8$__639ed41ba160095460058460ff1681548110620016275762001627620025d9565b600091825260209182902001546006546040516200165a936001600160a01b039093169201918252602082015260400190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e085901b1682526200169b9291600401918252602082015260400190565b602060405180830381865af4158015620016b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016df91906200235b565b600981905550600073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__630772e38360058460ff16815481106200171a576200171a620025d9565b60009182526020822001546040516001600160e01b031960e085901b1681526200175a926001600160a01b039092169190819081908190600401620025ef565b602060405180830381865af415801562001778573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200179e91906200235b565b600a54604051639ed41ba160e01b815260048101839052602481019190915290915073__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af4158015620017fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200182391906200235b565b600a55508062001833816200261d565b915050620015e3565b6000306040516200184d9062001fb0565b6001600160a01b039091168152602001604051809103906000f0801580156200187a573d6000803e3d6000fd5b509050806001600160a01b031663ed21248c476040518263ffffffff1660e01b81526004016000604051808303818588803b158015620018b957600080fd5b505af1158015620018ce573d6000803e3d6000fd5b5050600880546001600160a01b0319166001600160a01b038616179055505060095460408051602081019290925201905060408051808303601f190181528282528051602091820120600955600a54908301520160408051601f198184030181529190528051602090910120600a55426002556000600e5560055460065462001958919062002422565b600d55600654600b819055600c556040805163272bcd3160e21b815290516001600160a01b03831691639caf34c49160048083019260209291908290030181865afa158015620019ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019d291906200235b565b600d54600954600a549550955095509550505090919293565b60035460009081906001600160a01b0316331462001a1d5760405162461bcd60e51b8152600401620003789062002324565b600854600d546040805163272bcd3160e21b815290516001600160a01b0390931692602080880135928592639caf34c4926004808401939192918290030181865afa15801562001a71573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a9791906200235b565b62001aa3919062002422565b62001aaf91906200243c565b8560400151111562001af75760405162461bcd60e51b815260206004820152601060248201526f696e636f72726563742076616c75652160801b604482015260640162000378565b845160208087015188926000926001600160a01b03851692639d0b59d2929162001b24908b018b620024b1565b6040808d015190516001600160e01b031960e087901b168152600481019490945260248401929092526001600160a01b0316604483015260208a01356064830152608482015260a4016020604051808303816000875af115801562001b8d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bb391906200235b565b905073__$c7f8f94eeb4eceb1b6560c0bf9c7729f47$__637d4716f562001bde6020890189620024b1565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015260808a0135602483015260208a013560448301528901356064820152608401602060405180830381865af415801562001c40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c6691906200235b565b6009819055909890975095505050505050565b6003546000906001600160a01b0316331462001ca95760405162461bcd60e51b8152600401620003789062002324565b60025460000362001cb957600080fd5b600060405162001cc99062001fbe565b604051809103906000f08015801562001ce6573d6000803e3d6000fd5b50600780546001600160a01b039092166001600160a01b03199092168217905591505090565b6003546000906001600160a01b0316331462001d3c5760405162461bcd60e51b8152600401620003789062002324565b50600a5490565b6003546000906001600160a01b0316331462001d735760405162461bcd60e51b8152600401620003789062002324565b5060095490565b600080606060006064600b5486886060013562001d9891906200240c565b89600d5462001da891906200263f565b62001db590606462002422565b62001dc1919062002422565b62001dcd91906200243c565b62001dd991906200243c565b62001de590886200240c565b905062001df66020870187620024b1565b62001e07602088013560016200240c565b62001e18604089013560016200240c565b62001e288860608b01356200240c565b896080013560405160200162001e43959493929190620025ef565b60408051601f19818403018152919052915062001ea562001e686020880188620024b1565b62001e79602089013560016200240c565b62001e8a60408a013560016200240c565b62001e9a8960608c01356200240c565b8a608001356200154a565b9350915093509350939050565b600080606060006064600c5486886080013562001ed091906200240c565b62001edd90606462002422565b62001ee991906200243c565b62001ef69060646200263f565b62001f02908962002422565b62001f0e91906200243c565b905062001f1f6020870187620024b1565b602087013562001f35604089013560016200240c565b606089013562001f4a8960808c01356200240c565b60405160200162001f60959493929190620025ef565b60408051601f19818403018152919052915062001ea562001f856020880188620024b1565b602088013562001f9b60408a013560016200240c565b60608a0135620002838a60808d01356200240c565b61050d806200265683390190565b610c468062002b6383390190565b80356001600160a01b038116811462001fe457600080fd5b919050565b60006060828403121562001ffc57600080fd5b6040516060810181811067ffffffffffffffff821117156200202e57634e487b7160e01b600052604160045260246000fd5b80604052508091508235815260208301356020820152604083013560408201525092915050565b600080608083850312156200206957600080fd5b620020748362001fcc565b915062002085846020850162001fe9565b90509250929050565b60006101008284031215620020a257600080fd5b50919050565b60006101008284031215620020bc57600080fd5b620020c883836200208e565b9392505050565b60008060408385031215620020e357600080fd5b620020ee8362001fcc565b946020939093013593505050565b600060c08284031215620020a257600080fd5b6000806101c083850312156200212457600080fd5b620021308484620020fc565b9150620020858460c085016200208e565b600060608284031215620020a257600080fd5b60008060008061024085870312156200216c57600080fd5b620021778562001fcc565b935062002188866020870162002141565b92506200219986608087016200208e565b9150620021ab866101808701620020fc565b905092959194509250565b606081526000845180606084015260005b81811015620021e65760208188018101516080868401015201620021c7565b506000608082850101526080601f19601f830116840101915050836020830152826040830152949350505050565b600080600061018084860312156200222b57600080fd5b620022368462001fcc565b92506200224785602086016200208e565b91506200225985610120860162002141565b90509250925092565b600080600060a084860312156200227857600080fd5b620022838462001fcc565b92506020840135915062002259856040860162002141565b600080600080600060a08688031215620022b457600080fd5b620022bf8662001fcc565b97602087013597506040870135966060810135965060800135945092505050565b60008060006101808486031215620022f757600080fd5b620023028462001fcc565b925062002313856020860162001fe9565b91506200225985608086016200208e565b6020808252601a908201527f49746073206e6f7420612067726f757020636f6e747261637421000000000000604082015260600190565b6000602082840312156200236e57600080fd5b5051919050565b6001600160a01b0380620023898362001fcc565b1683526020820135602084015260408201356040840152606082013560608401526080820135608084015260a082013560a084015280620023cd60c0840162001fcc565b1660c08401525060e090810135910152565b6101008101620023f0828462002375565b92915050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620023f057620023f0620023f6565b8082028115828204841417620023f057620023f0620023f6565b6000826200245a57634e487b7160e01b600052601260045260246000fd5b500490565b60c081016001600160a01b03620024768462001fcc565b1682526020830135602083015260408301356040830152606083013560608301526080830135608083015260a083013560a083015292915050565b600060208284031215620024c457600080fd5b620020c88262001fcc565b8235815260208084013590820152604080840135908201526101608101620020c8606083018462002375565b81810360008312801583831316838312821617156200251e576200251e620023f6565b5092915050565b6001600160a01b03620025388262001fcc565b16825260208181013590830152604090810135910152565b6001600160a01b03841681526020810183905260a0810162002576604083018462002525565b949350505050565b608081016200258e828562002525565b8260608301529392505050565b600080600060608486031215620025b157600080fd5b83518015158114620025c257600080fd5b602085015160409095015190969495509392505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b600060ff821660ff8103620026365762002636620023f6565b60010192915050565b81810381811115620023f057620023f0620023f656fe608060405234801561001057600080fd5b5060405161050d38038061050d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61047a806100936000396000f3fe60806040526004361061007b5760003560e01c80639caf34c41161004e5780639caf34c414610109578063a2e1cd9e1461011e578063aa3dcd3f1461013e578063ed21248c1461015e57600080fd5b80632e1a7d4d146100805780635360a15c146100a25780636a79fb8d146100d45780636c716898146100f4575b600080fd5b34801561008c57600080fd5b506100a061009b3660046103b6565b610166565b005b3480156100ae57600080fd5b506100c26100bd3660046103b6565b610250565b60405190815260200160405180910390f35b3480156100e057600080fd5b506100c26100ef3660046103b6565b6102e2565b34801561010057600080fd5b506002546100c2565b34801561011557600080fd5b506001546100c2565b34801561012a57600080fd5b506100c26101393660046103b6565b610383565b34801561014a57600080fd5b506100c26101593660046103b6565b610390565b6100a061039d565b6000546001600160a01b031633146101b35760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd0818481c9bdd5b9960aa1b60448201526064015b60405180910390fd5b806101bd60015490565b116101fc5760405162461bcd60e51b815260206004820152600f60248201526e0dcdee840cadcdeeaced040ae8aa89608b1b60448201526064016101aa565b806001600082825461020e91906103e5565b9091555050600080546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561024c573d6000803e3d6000fd5b5050565b60008160015410156102975760405162461bcd60e51b815260206004820152601060248201526f0dcdee840cadcdeeaced0e840ae8aa8960831b60448201526064016101aa565b81600160008282546102a991906103e5565b909155506102ba90508260026103f8565b600260008282546102cb919061040f565b909155506102dc90508260026103f8565b92915050565b60008160025410156103285760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f756768742044414960881b60448201526064016101aa565b816002600082825461033a91906103e5565b9091555061034b9050600283610422565b61035690601461040f565b60016000828254610367919061040f565b909155506103789050600283610422565b6102dc90601461040f565b60006102dc8260026103f8565b60006102dc600283610422565b34600160008282546103af919061040f565b9091555050565b6000602082840312156103c857600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102dc576102dc6103cf565b80820281158282048414176102dc576102dc6103cf565b808201808211156102dc576102dc6103cf565b60008261043f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220056696642f95e392718646734467f3056b7a037aa88039512653af1c1800aaa664736f6c63430008110033608060405234801561001057600080fd5b50600080546001600160a01b0319163317905560405161004d9060200160208082526006908201526518db1bdcd95960d21b604082015260600190565b60408051601f198184030181529190528051602090910120600355610bcf806100776000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806383a692671161006657806383a69267146101075780639d0b59d21461010f578063a8fda77914610122578063bb2c3fd214610135578063ee9928a61461014857600080fd5b806322e1ee7c1461009857806327ef0e36146100ad5780632ca5ead3146100e257806352c4d14c146100f5575b600080fd5b6100ab6100a6366004610940565b61015b565b005b6100c06100bb366004610963565b6102e4565b6040805193151584526020840192909252908201526060015b60405180910390f35b6100ab6100f036600461098e565b6103a0565b6004545b6040519081526020016100d9565b6005546100f9565b6100f961011d3660046109c3565b6103dc565b6100f9610130366004610a0a565b610554565b6100ab610143366004610a47565b610653565b6100ab61015636600461098e565b6108b7565b6000546001600160a01b0316331461018e5760405162461bcd60e51b815260040161018590610a89565b60405180910390fd5b600254604080518335602082810191909152808501358284015282850135606080840191909152835180840390910181526080909201909252805191012082911461020c5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c1c9bdbd9881a5b9a5d60921b6044820152606401610185565b6000421161024f5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420636f72726563742074696d6560801b6044820152606401610185565b60405160200161025e90610ac0565b6040516020818303038152906040528051906020012060001c600354036102b65760405162461bcd60e51b815260206004820152600c60248201526b185b1c9958591e481cd95b9960a21b6044820152606401610185565b6040516020016102c590610ac0565b60408051601f1981840301815291905280516020909101206003555050565b60008060008073__$02cb286b575382a609bf5f0a09d5c56ef2$__637bb3f4a7876040518263ffffffff1660e01b81526004016103219190610ade565b602060405180830381865af415801561033e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103629190610b10565b9050600154811480156103785750856020013585115b1561038d576001805490945092509050610399565b60015460009450925090505b9250925092565b6000546001600160a01b031633146103ca5760405162461bcd60e51b815260040161018590610a89565b600081116103d757600080fd5b600555565b600080546001600160a01b031633146104075760405162461bcd60e51b815260040161018590610a89565b6040516020016104319060208082526006908201526518db1bdcd95960d21b604082015260600190565b6040516020818303038152906040528051906020012060001c6003541461049a5760405162461bcd60e51b815260206004820152601a60248201527f6c6f7420686173206e6f74206265656e20636f6d706c657465640000000000006044820152606401610185565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526000605482015260740160408051808303601f190181528282528051602091820120600155820188905281018690526060810183905260800160408051808303601f1901815282825280516020918201206002558083015260059082015264656d70747960d81b606082015260800160408051601f1981840301815291905280516020909101206003555060015495945050505050565b600080546001600160a01b0316331461057f5760405162461bcd60e51b815260040161018590610a89565b6040516020016105a890602080825260059082015264656d70747960d81b604082015260600190565b6040516020818303038152906040528051906020012060001c600354146105fd5760405162461bcd60e51b81526020600482015260096024820152686e6f7420656d70747960b81b6044820152606401610185565b6001546040516bffffffffffffffffffffffff19606087901b16602082015260348101859052605481019190915260740160408051808303601f1901815291905280516020909101206001819055949350505050565b6000546001600160a01b0316331461067d5760405162461bcd60e51b815260040161018590610a89565b60025460408051843560208281019190915280860135828401528286013560608084019190915283518084039091018152608090920190925280519101208391146106fb5760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c1c9bdbd9881a5b9a5d60921b6044820152606401610185565b81600073__$02cb286b575382a609bf5f0a09d5c56ef2$__63cc5a0271836040518263ffffffff1660e01b81526004016107359190610b29565b602060405180830381865af4158015610752573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107769190610b10565b905060015481146107c15760405162461bcd60e51b81526020600482015260156024820152742737ba103934b3b43a10383937b7b31037bbb732b960591b6044820152606401610185565b6040516020016107d090610ac0565b6040516020818303038152906040528051906020012060001c600354146108285760405162461bcd60e51b815260206004820152600c60248201526b1dd85cc81b9bdd081cd95b9d60a21b6044820152606401610185565b6000421161086b5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420636f72726563742074696d6560801b6044820152606401610185565b6040516020016108959060208082526006908201526518db1bdcd95960d21b604082015260600190565b60408051601f1981840301815291905280516020909101206003555050505050565b6000546001600160a01b031633146108e15760405162461bcd60e51b815260040161018590610a89565b600081116109235760405162461bcd60e51b815260206004820152600f60248201526e756e636f72726563742076616c756560881b6044820152606401610185565b600455565b60006060828403121561093a57600080fd5b50919050565b60006060828403121561095257600080fd5b61095c8383610928565b9392505050565b6000806080838503121561097657600080fd5b6109808484610928565b946060939093013593505050565b6000602082840312156109a057600080fd5b5035919050565b80356001600160a01b03811681146109be57600080fd5b919050565b600080600080600060a086880312156109db57600080fd5b85359450602086013593506109f2604087016109a7565b94979396509394606081013594506080013592915050565b600080600060a08486031215610a1f57600080fd5b610a28846109a7565b925060208401359150610a3e8560408601610928565b90509250925092565b600080828403610160811215610a5c57600080fd5b610a668585610928565b9250610100605f1982011215610a7b57600080fd5b506060830190509250929050565b6020808252601a908201527f49746073206e6f74206120726f756e6420636f6e747261637421000000000000604082015260600190565b6020808252600490820152631dd85a5d60e21b604082015260600190565b606081016001600160a01b03610af3846109a7565b168252602083013560208301526040830135604083015292915050565b600060208284031215610b2257600080fd5b5051919050565b61010081016001600160a01b0380610b40856109a7565b1683526020840135602084015260408401356040840152606084013560608401526080840135608084015260a084013560a084015280610b8260c086016109a7565b1660c08401525060e083013560e08301529291505056fea26469706673582212203ba6f9d70e7dc6853c753b0877d6ed9c288d340d3c86fa2eb1a77ca0d91708b764736f6c63430008110033a264697066735822122090ac67d25d056868daa0d5d6885c0c1ea92a6b04f7fd7336a8e1ffb10e68cacd64736f6c63430008110033a26469706673582212209618841044aafb4f1c62b3fdeafa208f20cb98ccaf79b3a7f8bd23ed83cff6f464736f6c63430008110033",
}

// ApigroupABI is the input ABI used to generate the binding from.
// Deprecated: Use ApigroupMetaData.ABI instead.
var ApigroupABI = ApigroupMetaData.ABI

// ApigroupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ApigroupMetaData.Bin instead.
var ApigroupBin = ApigroupMetaData.Bin

// DeployApigroup deploys a new Ethereum contract, binding an instance of Apigroup to it.
func DeployApigroup(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Apigroup, error) {
	parsed, err := ApigroupMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ApigroupBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Apigroup{ApigroupCaller: ApigroupCaller{contract: contract}, ApigroupTransactor: ApigroupTransactor{contract: contract}, ApigroupFilterer: ApigroupFilterer{contract: contract}}, nil
}

// Apigroup is an auto generated Go binding around an Ethereum contract.
type Apigroup struct {
	ApigroupCaller     // Read-only binding to the contract
	ApigroupTransactor // Write-only binding to the contract
	ApigroupFilterer   // Log filterer for contract events
}

// ApigroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type ApigroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApigroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ApigroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApigroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ApigroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApigroupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ApigroupSession struct {
	Contract     *Apigroup         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApigroupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ApigroupCallerSession struct {
	Contract *ApigroupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ApigroupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ApigroupTransactorSession struct {
	Contract     *ApigroupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ApigroupRaw is an auto generated low-level Go binding around an Ethereum contract.
type ApigroupRaw struct {
	Contract *Apigroup // Generic contract binding to access the raw methods on
}

// ApigroupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ApigroupCallerRaw struct {
	Contract *ApigroupCaller // Generic read-only contract binding to access the raw methods on
}

// ApigroupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ApigroupTransactorRaw struct {
	Contract *ApigroupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewApigroup creates a new instance of Apigroup, bound to a specific deployed contract.
func NewApigroup(address common.Address, backend bind.ContractBackend) (*Apigroup, error) {
	contract, err := bindApigroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Apigroup{ApigroupCaller: ApigroupCaller{contract: contract}, ApigroupTransactor: ApigroupTransactor{contract: contract}, ApigroupFilterer: ApigroupFilterer{contract: contract}}, nil
}

// NewApigroupCaller creates a new read-only instance of Apigroup, bound to a specific deployed contract.
func NewApigroupCaller(address common.Address, caller bind.ContractCaller) (*ApigroupCaller, error) {
	contract, err := bindApigroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ApigroupCaller{contract: contract}, nil
}

// NewApigroupTransactor creates a new write-only instance of Apigroup, bound to a specific deployed contract.
func NewApigroupTransactor(address common.Address, transactor bind.ContractTransactor) (*ApigroupTransactor, error) {
	contract, err := bindApigroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ApigroupTransactor{contract: contract}, nil
}

// NewApigroupFilterer creates a new log filterer instance of Apigroup, bound to a specific deployed contract.
func NewApigroupFilterer(address common.Address, filterer bind.ContractFilterer) (*ApigroupFilterer, error) {
	contract, err := bindApigroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ApigroupFilterer{contract: contract}, nil
}

// bindApigroup binds a generic wrapper to an already deployed contract.
func bindApigroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ApigroupABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Apigroup *ApigroupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Apigroup.Contract.ApigroupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Apigroup *ApigroupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.Contract.ApigroupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Apigroup *ApigroupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Apigroup.Contract.ApigroupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Apigroup *ApigroupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Apigroup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Apigroup *ApigroupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Apigroup *ApigroupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Apigroup.Contract.contract.Transact(opts, method, params...)
}

// GetProofEp is a free data retrieval call binding the contract method 0xf9c2b922.
//
// Solidity: function GetProofEp(address _lotAddr, uint256 newPrice, bytes proofEPData) view returns(bool, uint256, uint256)
func (_Apigroup *ApigroupCaller) GetProofEp(opts *bind.CallOpts, _lotAddr common.Address, newPrice *big.Int, proofEPData []byte) (bool, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _Apigroup.contract.Call(opts, &out, "GetProofEp", _lotAddr, newPrice, proofEPData)

	if err != nil {
		return *new(bool), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetProofEp is a free data retrieval call binding the contract method 0xf9c2b922.
//
// Solidity: function GetProofEp(address _lotAddr, uint256 newPrice, bytes proofEPData) view returns(bool, uint256, uint256)
func (_Apigroup *ApigroupSession) GetProofEp(_lotAddr common.Address, newPrice *big.Int, proofEPData []byte) (bool, *big.Int, *big.Int, error) {
	return _Apigroup.Contract.GetProofEp(&_Apigroup.CallOpts, _lotAddr, newPrice, proofEPData)
}

// GetProofEp is a free data retrieval call binding the contract method 0xf9c2b922.
//
// Solidity: function GetProofEp(address _lotAddr, uint256 newPrice, bytes proofEPData) view returns(bool, uint256, uint256)
func (_Apigroup *ApigroupCallerSession) GetProofEp(_lotAddr common.Address, newPrice *big.Int, proofEPData []byte) (bool, *big.Int, *big.Int, error) {
	return _Apigroup.Contract.GetProofEp(&_Apigroup.CallOpts, _lotAddr, newPrice, proofEPData)
}

// GetProofResNewLot is a free data retrieval call binding the contract method 0x35817e92.
//
// Solidity: function GetProofResNewLot(bytes proofResData) view returns(bool, uint256, uint256)
func (_Apigroup *ApigroupCaller) GetProofResNewLot(opts *bind.CallOpts, proofResData []byte) (bool, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _Apigroup.contract.Call(opts, &out, "GetProofResNewLot", proofResData)

	if err != nil {
		return *new(bool), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetProofResNewLot is a free data retrieval call binding the contract method 0x35817e92.
//
// Solidity: function GetProofResNewLot(bytes proofResData) view returns(bool, uint256, uint256)
func (_Apigroup *ApigroupSession) GetProofResNewLot(proofResData []byte) (bool, *big.Int, *big.Int, error) {
	return _Apigroup.Contract.GetProofResNewLot(&_Apigroup.CallOpts, proofResData)
}

// GetProofResNewLot is a free data retrieval call binding the contract method 0x35817e92.
//
// Solidity: function GetProofResNewLot(bytes proofResData) view returns(bool, uint256, uint256)
func (_Apigroup *ApigroupCallerSession) GetProofResNewLot(proofResData []byte) (bool, *big.Int, *big.Int, error) {
	return _Apigroup.Contract.GetProofResNewLot(&_Apigroup.CallOpts, proofResData)
}

// BuyLot is a paid mutator transaction binding the contract method 0x5be4a96c.
//
// Solidity: function BuyLot(address _lotAddr, bytes proofResData, bytes proofEPData) returns()
func (_Apigroup *ApigroupTransactor) BuyLot(opts *bind.TransactOpts, _lotAddr common.Address, proofResData []byte, proofEPData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "BuyLot", _lotAddr, proofResData, proofEPData)
}

// BuyLot is a paid mutator transaction binding the contract method 0x5be4a96c.
//
// Solidity: function BuyLot(address _lotAddr, bytes proofResData, bytes proofEPData) returns()
func (_Apigroup *ApigroupSession) BuyLot(_lotAddr common.Address, proofResData []byte, proofEPData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.BuyLot(&_Apigroup.TransactOpts, _lotAddr, proofResData, proofEPData)
}

// BuyLot is a paid mutator transaction binding the contract method 0x5be4a96c.
//
// Solidity: function BuyLot(address _lotAddr, bytes proofResData, bytes proofEPData) returns()
func (_Apigroup *ApigroupTransactorSession) BuyLot(_lotAddr common.Address, proofResData []byte, proofEPData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.BuyLot(&_Apigroup.TransactOpts, _lotAddr, proofResData, proofEPData)
}

// CreateLot is a paid mutator transaction binding the contract method 0xd53e743e.
//
// Solidity: function CreateLot() returns()
func (_Apigroup *ApigroupTransactor) CreateLot(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "CreateLot")
}

// CreateLot is a paid mutator transaction binding the contract method 0xd53e743e.
//
// Solidity: function CreateLot() returns()
func (_Apigroup *ApigroupSession) CreateLot() (*types.Transaction, error) {
	return _Apigroup.Contract.CreateLot(&_Apigroup.TransactOpts)
}

// CreateLot is a paid mutator transaction binding the contract method 0xd53e743e.
//
// Solidity: function CreateLot() returns()
func (_Apigroup *ApigroupTransactorSession) CreateLot() (*types.Transaction, error) {
	return _Apigroup.Contract.CreateLot(&_Apigroup.TransactOpts)
}

// CreateRound is a paid mutator transaction binding the contract method 0x257b6e0c.
//
// Solidity: function CreateRound(uint256 _deposit) returns()
func (_Apigroup *ApigroupTransactor) CreateRound(opts *bind.TransactOpts, _deposit *big.Int) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "CreateRound", _deposit)
}

// CreateRound is a paid mutator transaction binding the contract method 0x257b6e0c.
//
// Solidity: function CreateRound(uint256 _deposit) returns()
func (_Apigroup *ApigroupSession) CreateRound(_deposit *big.Int) (*types.Transaction, error) {
	return _Apigroup.Contract.CreateRound(&_Apigroup.TransactOpts, _deposit)
}

// CreateRound is a paid mutator transaction binding the contract method 0x257b6e0c.
//
// Solidity: function CreateRound(uint256 _deposit) returns()
func (_Apigroup *ApigroupTransactorSession) CreateRound(_deposit *big.Int) (*types.Transaction, error) {
	return _Apigroup.Contract.CreateRound(&_Apigroup.TransactOpts, _deposit)
}

// Enter is a paid mutator transaction binding the contract method 0x1097e579.
//
// Solidity: function Enter() payable returns()
func (_Apigroup *ApigroupTransactor) Enter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "Enter")
}

// Enter is a paid mutator transaction binding the contract method 0x1097e579.
//
// Solidity: function Enter() payable returns()
func (_Apigroup *ApigroupSession) Enter() (*types.Transaction, error) {
	return _Apigroup.Contract.Enter(&_Apigroup.TransactOpts)
}

// Enter is a paid mutator transaction binding the contract method 0x1097e579.
//
// Solidity: function Enter() payable returns()
func (_Apigroup *ApigroupTransactorSession) Enter() (*types.Transaction, error) {
	return _Apigroup.Contract.Enter(&_Apigroup.TransactOpts)
}

// NewLot is a paid mutator transaction binding the contract method 0x70ebfc2d.
//
// Solidity: function NewLot(address _lotAddr, bytes initParamsData, bytes proofResData) returns()
func (_Apigroup *ApigroupTransactor) NewLot(opts *bind.TransactOpts, _lotAddr common.Address, initParamsData []byte, proofResData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "NewLot", _lotAddr, initParamsData, proofResData)
}

// NewLot is a paid mutator transaction binding the contract method 0x70ebfc2d.
//
// Solidity: function NewLot(address _lotAddr, bytes initParamsData, bytes proofResData) returns()
func (_Apigroup *ApigroupSession) NewLot(_lotAddr common.Address, initParamsData []byte, proofResData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.NewLot(&_Apigroup.TransactOpts, _lotAddr, initParamsData, proofResData)
}

// NewLot is a paid mutator transaction binding the contract method 0x70ebfc2d.
//
// Solidity: function NewLot(address _lotAddr, bytes initParamsData, bytes proofResData) returns()
func (_Apigroup *ApigroupTransactorSession) NewLot(_lotAddr common.Address, initParamsData []byte, proofResData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.NewLot(&_Apigroup.TransactOpts, _lotAddr, initParamsData, proofResData)
}

// ReceiveLot is a paid mutator transaction binding the contract method 0xc9001884.
//
// Solidity: function ReceiveLot(address _lotAddr, address _owner, bytes initParamsData, bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupTransactor) ReceiveLot(opts *bind.TransactOpts, _lotAddr common.Address, _owner common.Address, initParamsData []byte, proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "ReceiveLot", _lotAddr, _owner, initParamsData, proofResData, playerParamsData)
}

// ReceiveLot is a paid mutator transaction binding the contract method 0xc9001884.
//
// Solidity: function ReceiveLot(address _lotAddr, address _owner, bytes initParamsData, bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupSession) ReceiveLot(_lotAddr common.Address, _owner common.Address, initParamsData []byte, proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.ReceiveLot(&_Apigroup.TransactOpts, _lotAddr, _owner, initParamsData, proofResData, playerParamsData)
}

// ReceiveLot is a paid mutator transaction binding the contract method 0xc9001884.
//
// Solidity: function ReceiveLot(address _lotAddr, address _owner, bytes initParamsData, bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupTransactorSession) ReceiveLot(_lotAddr common.Address, _owner common.Address, initParamsData []byte, proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.ReceiveLot(&_Apigroup.TransactOpts, _lotAddr, _owner, initParamsData, proofResData, playerParamsData)
}

// SendLot is a paid mutator transaction binding the contract method 0x5ebb86c0.
//
// Solidity: function SendLot(address _lotAddr, bytes initParamsData) returns()
func (_Apigroup *ApigroupTransactor) SendLot(opts *bind.TransactOpts, _lotAddr common.Address, initParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "SendLot", _lotAddr, initParamsData)
}

// SendLot is a paid mutator transaction binding the contract method 0x5ebb86c0.
//
// Solidity: function SendLot(address _lotAddr, bytes initParamsData) returns()
func (_Apigroup *ApigroupSession) SendLot(_lotAddr common.Address, initParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.SendLot(&_Apigroup.TransactOpts, _lotAddr, initParamsData)
}

// SendLot is a paid mutator transaction binding the contract method 0x5ebb86c0.
//
// Solidity: function SendLot(address _lotAddr, bytes initParamsData) returns()
func (_Apigroup *ApigroupTransactorSession) SendLot(_lotAddr common.Address, initParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.SendLot(&_Apigroup.TransactOpts, _lotAddr, initParamsData)
}

// StartRound is a paid mutator transaction binding the contract method 0xaa7d7568.
//
// Solidity: function StartRound() returns()
func (_Apigroup *ApigroupTransactor) StartRound(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "StartRound")
}

// StartRound is a paid mutator transaction binding the contract method 0xaa7d7568.
//
// Solidity: function StartRound() returns()
func (_Apigroup *ApigroupSession) StartRound() (*types.Transaction, error) {
	return _Apigroup.Contract.StartRound(&_Apigroup.TransactOpts)
}

// StartRound is a paid mutator transaction binding the contract method 0xaa7d7568.
//
// Solidity: function StartRound() returns()
func (_Apigroup *ApigroupTransactorSession) StartRound() (*types.Transaction, error) {
	return _Apigroup.Contract.StartRound(&_Apigroup.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd224efc8.
//
// Solidity: function Withdraw(bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupTransactor) Withdraw(opts *bind.TransactOpts, proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "Withdraw", proofResData, playerParamsData)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd224efc8.
//
// Solidity: function Withdraw(bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupSession) Withdraw(proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.Withdraw(&_Apigroup.TransactOpts, proofResData, playerParamsData)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd224efc8.
//
// Solidity: function Withdraw(bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupTransactorSession) Withdraw(proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.Withdraw(&_Apigroup.TransactOpts, proofResData, playerParamsData)
}

// ApigroupBuyLotEventIterator is returned from FilterBuyLotEvent and is used to iterate over the raw logs and unpacked data for BuyLotEvent events raised by the Apigroup contract.
type ApigroupBuyLotEventIterator struct {
	Event *ApigroupBuyLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupBuyLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupBuyLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupBuyLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupBuyLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupBuyLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupBuyLotEvent represents a BuyLotEvent event raised by the Apigroup contract.
type ApigroupBuyLotEvent struct {
	RoundAddress common.Address
	LotAddr      common.Address
	Sender       common.Address
	Price        *big.Int
	LotSnap      *big.Int
	Bsnap        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterBuyLotEvent is a free log retrieval operation binding the contract event 0x4fc33a0e6a259fb2ce75e5cbd9fdde7d4eefdaac773afbd1a02c1f2fdb2c66f9.
//
// Solidity: event BuyLotEvent(address _roundAddress, address _lotAddr, address _sender, uint256 _price, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) FilterBuyLotEvent(opts *bind.FilterOpts) (*ApigroupBuyLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "BuyLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupBuyLotEventIterator{contract: _Apigroup.contract, event: "BuyLotEvent", logs: logs, sub: sub}, nil
}

// WatchBuyLotEvent is a free log subscription operation binding the contract event 0x4fc33a0e6a259fb2ce75e5cbd9fdde7d4eefdaac773afbd1a02c1f2fdb2c66f9.
//
// Solidity: event BuyLotEvent(address _roundAddress, address _lotAddr, address _sender, uint256 _price, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) WatchBuyLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupBuyLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "BuyLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupBuyLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "BuyLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBuyLotEvent is a log parse operation binding the contract event 0x4fc33a0e6a259fb2ce75e5cbd9fdde7d4eefdaac773afbd1a02c1f2fdb2c66f9.
//
// Solidity: event BuyLotEvent(address _roundAddress, address _lotAddr, address _sender, uint256 _price, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) ParseBuyLotEvent(log types.Log) (*ApigroupBuyLotEvent, error) {
	event := new(ApigroupBuyLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "BuyLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupCreateRoundEventIterator is returned from FilterCreateRoundEvent and is used to iterate over the raw logs and unpacked data for CreateRoundEvent events raised by the Apigroup contract.
type ApigroupCreateRoundEventIterator struct {
	Event *ApigroupCreateRoundEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupCreateRoundEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupCreateRoundEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupCreateRoundEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupCreateRoundEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupCreateRoundEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupCreateRoundEvent represents a CreateRoundEvent event raised by the Apigroup contract.
type ApigroupCreateRoundEvent struct {
	RoundAddress common.Address
	Deposit      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateRoundEvent is a free log retrieval operation binding the contract event 0xf901c2f537cd421ec196e0b11577d59e041a570ece9cdca8a901ddd7f20b4254.
//
// Solidity: event CreateRoundEvent(address _roundAddress, uint256 _deposit)
func (_Apigroup *ApigroupFilterer) FilterCreateRoundEvent(opts *bind.FilterOpts) (*ApigroupCreateRoundEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "CreateRoundEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupCreateRoundEventIterator{contract: _Apigroup.contract, event: "CreateRoundEvent", logs: logs, sub: sub}, nil
}

// WatchCreateRoundEvent is a free log subscription operation binding the contract event 0xf901c2f537cd421ec196e0b11577d59e041a570ece9cdca8a901ddd7f20b4254.
//
// Solidity: event CreateRoundEvent(address _roundAddress, uint256 _deposit)
func (_Apigroup *ApigroupFilterer) WatchCreateRoundEvent(opts *bind.WatchOpts, sink chan<- *ApigroupCreateRoundEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "CreateRoundEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupCreateRoundEvent)
				if err := _Apigroup.contract.UnpackLog(event, "CreateRoundEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateRoundEvent is a log parse operation binding the contract event 0xf901c2f537cd421ec196e0b11577d59e041a570ece9cdca8a901ddd7f20b4254.
//
// Solidity: event CreateRoundEvent(address _roundAddress, uint256 _deposit)
func (_Apigroup *ApigroupFilterer) ParseCreateRoundEvent(log types.Log) (*ApigroupCreateRoundEvent, error) {
	event := new(ApigroupCreateRoundEvent)
	if err := _Apigroup.contract.UnpackLog(event, "CreateRoundEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupCreatedLotEventIterator is returned from FilterCreatedLotEvent and is used to iterate over the raw logs and unpacked data for CreatedLotEvent events raised by the Apigroup contract.
type ApigroupCreatedLotEventIterator struct {
	Event *ApigroupCreatedLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupCreatedLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupCreatedLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupCreatedLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupCreatedLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupCreatedLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupCreatedLotEvent represents a CreatedLotEvent event raised by the Apigroup contract.
type ApigroupCreatedLotEvent struct {
	RoundAddress common.Address
	LotAddr      common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreatedLotEvent is a free log retrieval operation binding the contract event 0x918ba15a8dc4906fa0a8ac698245a6a565c4724cf9a27b8be97bf3af6e315035.
//
// Solidity: event CreatedLotEvent(address _roundAddress, address _lotAddr)
func (_Apigroup *ApigroupFilterer) FilterCreatedLotEvent(opts *bind.FilterOpts) (*ApigroupCreatedLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "CreatedLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupCreatedLotEventIterator{contract: _Apigroup.contract, event: "CreatedLotEvent", logs: logs, sub: sub}, nil
}

// WatchCreatedLotEvent is a free log subscription operation binding the contract event 0x918ba15a8dc4906fa0a8ac698245a6a565c4724cf9a27b8be97bf3af6e315035.
//
// Solidity: event CreatedLotEvent(address _roundAddress, address _lotAddr)
func (_Apigroup *ApigroupFilterer) WatchCreatedLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupCreatedLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "CreatedLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupCreatedLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "CreatedLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedLotEvent is a log parse operation binding the contract event 0x918ba15a8dc4906fa0a8ac698245a6a565c4724cf9a27b8be97bf3af6e315035.
//
// Solidity: event CreatedLotEvent(address _roundAddress, address _lotAddr)
func (_Apigroup *ApigroupFilterer) ParseCreatedLotEvent(log types.Log) (*ApigroupCreatedLotEvent, error) {
	event := new(ApigroupCreatedLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "CreatedLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupEnterRoundEventIterator is returned from FilterEnterRoundEvent and is used to iterate over the raw logs and unpacked data for EnterRoundEvent events raised by the Apigroup contract.
type ApigroupEnterRoundEventIterator struct {
	Event *ApigroupEnterRoundEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupEnterRoundEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupEnterRoundEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupEnterRoundEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupEnterRoundEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupEnterRoundEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupEnterRoundEvent represents a EnterRoundEvent event raised by the Apigroup contract.
type ApigroupEnterRoundEvent struct {
	RoundAddress common.Address
	Sender       common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterEnterRoundEvent is a free log retrieval operation binding the contract event 0xc27ed72edbb571182c3c5aa21b035674fc49c06957440f22d55f7e2bf00f3180.
//
// Solidity: event EnterRoundEvent(address _roundAddress, address _sender)
func (_Apigroup *ApigroupFilterer) FilterEnterRoundEvent(opts *bind.FilterOpts) (*ApigroupEnterRoundEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "EnterRoundEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupEnterRoundEventIterator{contract: _Apigroup.contract, event: "EnterRoundEvent", logs: logs, sub: sub}, nil
}

// WatchEnterRoundEvent is a free log subscription operation binding the contract event 0xc27ed72edbb571182c3c5aa21b035674fc49c06957440f22d55f7e2bf00f3180.
//
// Solidity: event EnterRoundEvent(address _roundAddress, address _sender)
func (_Apigroup *ApigroupFilterer) WatchEnterRoundEvent(opts *bind.WatchOpts, sink chan<- *ApigroupEnterRoundEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "EnterRoundEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupEnterRoundEvent)
				if err := _Apigroup.contract.UnpackLog(event, "EnterRoundEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnterRoundEvent is a log parse operation binding the contract event 0xc27ed72edbb571182c3c5aa21b035674fc49c06957440f22d55f7e2bf00f3180.
//
// Solidity: event EnterRoundEvent(address _roundAddress, address _sender)
func (_Apigroup *ApigroupFilterer) ParseEnterRoundEvent(log types.Log) (*ApigroupEnterRoundEvent, error) {
	event := new(ApigroupEnterRoundEvent)
	if err := _Apigroup.contract.UnpackLog(event, "EnterRoundEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupNewLotEventIterator is returned from FilterNewLotEvent and is used to iterate over the raw logs and unpacked data for NewLotEvent events raised by the Apigroup contract.
type ApigroupNewLotEventIterator struct {
	Event *ApigroupNewLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupNewLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupNewLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupNewLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupNewLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupNewLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupNewLotEvent represents a NewLotEvent event raised by the Apigroup contract.
type ApigroupNewLotEvent struct {
	RoundAddress common.Address
	LotAddr      common.Address
	Owner        common.Address
	TimeFirst    *big.Int
	TimeSecond   *big.Int
	Price        *big.Int
	Val          *big.Int
	LotSnap      *big.Int
	Bsnap        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterNewLotEvent is a free log retrieval operation binding the contract event 0x0ec6421e5db42f49d5bc9b51a59d5babed4e72573d1b56303b98a9496e3be021.
//
// Solidity: event NewLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _timeFirst, uint256 _timeSecond, uint256 _price, uint256 _val, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) FilterNewLotEvent(opts *bind.FilterOpts) (*ApigroupNewLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "NewLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupNewLotEventIterator{contract: _Apigroup.contract, event: "NewLotEvent", logs: logs, sub: sub}, nil
}

// WatchNewLotEvent is a free log subscription operation binding the contract event 0x0ec6421e5db42f49d5bc9b51a59d5babed4e72573d1b56303b98a9496e3be021.
//
// Solidity: event NewLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _timeFirst, uint256 _timeSecond, uint256 _price, uint256 _val, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) WatchNewLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupNewLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "NewLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupNewLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "NewLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewLotEvent is a log parse operation binding the contract event 0x0ec6421e5db42f49d5bc9b51a59d5babed4e72573d1b56303b98a9496e3be021.
//
// Solidity: event NewLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _timeFirst, uint256 _timeSecond, uint256 _price, uint256 _val, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) ParseNewLotEvent(log types.Log) (*ApigroupNewLotEvent, error) {
	event := new(ApigroupNewLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "NewLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupReceiveLotEventIterator is returned from FilterReceiveLotEvent and is used to iterate over the raw logs and unpacked data for ReceiveLotEvent events raised by the Apigroup contract.
type ApigroupReceiveLotEventIterator struct {
	Event *ApigroupReceiveLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupReceiveLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupReceiveLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupReceiveLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupReceiveLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupReceiveLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupReceiveLotEvent represents a ReceiveLotEvent event raised by the Apigroup contract.
type ApigroupReceiveLotEvent struct {
	RoundAddress common.Address
	LotAddr      common.Address
	Owner        common.Address
	Balance      *big.Int
	SposDelta    *big.Int
	SnegDelta    *big.Int
	Reserve      *big.Int
	Psnap        *big.Int
	Bsnap        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterReceiveLotEvent is a free log retrieval operation binding the contract event 0x7d47cd57bf3877d2dc4c47f28fce9a4ce01fcf971cdf66f76b40e4890c2dbd5b.
//
// Solidity: event ReceiveLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _balance, uint256 _SposDelta, uint256 _SnegDelta, uint256 _reserve, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) FilterReceiveLotEvent(opts *bind.FilterOpts) (*ApigroupReceiveLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "ReceiveLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupReceiveLotEventIterator{contract: _Apigroup.contract, event: "ReceiveLotEvent", logs: logs, sub: sub}, nil
}

// WatchReceiveLotEvent is a free log subscription operation binding the contract event 0x7d47cd57bf3877d2dc4c47f28fce9a4ce01fcf971cdf66f76b40e4890c2dbd5b.
//
// Solidity: event ReceiveLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _balance, uint256 _SposDelta, uint256 _SnegDelta, uint256 _reserve, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) WatchReceiveLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupReceiveLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "ReceiveLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupReceiveLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "ReceiveLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveLotEvent is a log parse operation binding the contract event 0x7d47cd57bf3877d2dc4c47f28fce9a4ce01fcf971cdf66f76b40e4890c2dbd5b.
//
// Solidity: event ReceiveLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _balance, uint256 _SposDelta, uint256 _SnegDelta, uint256 _reserve, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) ParseReceiveLotEvent(log types.Log) (*ApigroupReceiveLotEvent, error) {
	event := new(ApigroupReceiveLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "ReceiveLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupSendLotEventIterator is returned from FilterSendLotEvent and is used to iterate over the raw logs and unpacked data for SendLotEvent events raised by the Apigroup contract.
type ApigroupSendLotEventIterator struct {
	Event *ApigroupSendLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupSendLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupSendLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupSendLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupSendLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupSendLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupSendLotEvent represents a SendLotEvent event raised by the Apigroup contract.
type ApigroupSendLotEvent struct {
	RoundAddress  common.Address
	LotAddr       common.Address
	ReceiveTokens *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSendLotEvent is a free log retrieval operation binding the contract event 0x7c63f4ca5f3947a628e97b9822a09acf9382a1c3916ccbf7493097dc2f081ecf.
//
// Solidity: event SendLotEvent(address _roundAddress, address _lotAddr, uint256 _receiveTokens)
func (_Apigroup *ApigroupFilterer) FilterSendLotEvent(opts *bind.FilterOpts) (*ApigroupSendLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "SendLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupSendLotEventIterator{contract: _Apigroup.contract, event: "SendLotEvent", logs: logs, sub: sub}, nil
}

// WatchSendLotEvent is a free log subscription operation binding the contract event 0x7c63f4ca5f3947a628e97b9822a09acf9382a1c3916ccbf7493097dc2f081ecf.
//
// Solidity: event SendLotEvent(address _roundAddress, address _lotAddr, uint256 _receiveTokens)
func (_Apigroup *ApigroupFilterer) WatchSendLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupSendLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "SendLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupSendLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "SendLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendLotEvent is a log parse operation binding the contract event 0x7c63f4ca5f3947a628e97b9822a09acf9382a1c3916ccbf7493097dc2f081ecf.
//
// Solidity: event SendLotEvent(address _roundAddress, address _lotAddr, uint256 _receiveTokens)
func (_Apigroup *ApigroupFilterer) ParseSendLotEvent(log types.Log) (*ApigroupSendLotEvent, error) {
	event := new(ApigroupSendLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "SendLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupStartRoundEventIterator is returned from FilterStartRoundEvent and is used to iterate over the raw logs and unpacked data for StartRoundEvent events raised by the Apigroup contract.
type ApigroupStartRoundEventIterator struct {
	Event *ApigroupStartRoundEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupStartRoundEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupStartRoundEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupStartRoundEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupStartRoundEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupStartRoundEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupStartRoundEvent represents a StartRoundEvent event raised by the Apigroup contract.
type ApigroupStartRoundEvent struct {
	RoundAddress common.Address
	Reserve      *big.Int
	MaxRange     *big.Int
	Bsnap        *big.Int
	Psnap        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStartRoundEvent is a free log retrieval operation binding the contract event 0xd3eab242dde95a503acc5d1b4e71fcd552c598a697249c87a38b48333e63c647.
//
// Solidity: event StartRoundEvent(address _roundAddress, uint256 _reserve, uint256 _maxRange, uint256 _bsnap, uint256 _psnap)
func (_Apigroup *ApigroupFilterer) FilterStartRoundEvent(opts *bind.FilterOpts) (*ApigroupStartRoundEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "StartRoundEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupStartRoundEventIterator{contract: _Apigroup.contract, event: "StartRoundEvent", logs: logs, sub: sub}, nil
}

// WatchStartRoundEvent is a free log subscription operation binding the contract event 0xd3eab242dde95a503acc5d1b4e71fcd552c598a697249c87a38b48333e63c647.
//
// Solidity: event StartRoundEvent(address _roundAddress, uint256 _reserve, uint256 _maxRange, uint256 _bsnap, uint256 _psnap)
func (_Apigroup *ApigroupFilterer) WatchStartRoundEvent(opts *bind.WatchOpts, sink chan<- *ApigroupStartRoundEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "StartRoundEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupStartRoundEvent)
				if err := _Apigroup.contract.UnpackLog(event, "StartRoundEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStartRoundEvent is a log parse operation binding the contract event 0xd3eab242dde95a503acc5d1b4e71fcd552c598a697249c87a38b48333e63c647.
//
// Solidity: event StartRoundEvent(address _roundAddress, uint256 _reserve, uint256 _maxRange, uint256 _bsnap, uint256 _psnap)
func (_Apigroup *ApigroupFilterer) ParseStartRoundEvent(log types.Log) (*ApigroupStartRoundEvent, error) {
	event := new(ApigroupStartRoundEvent)
	if err := _Apigroup.contract.UnpackLog(event, "StartRoundEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupUpdatePlayerParamsIterator is returned from FilterUpdatePlayerParams and is used to iterate over the raw logs and unpacked data for UpdatePlayerParams events raised by the Apigroup contract.
type ApigroupUpdatePlayerParamsIterator struct {
	Event *ApigroupUpdatePlayerParams // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupUpdatePlayerParamsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupUpdatePlayerParams)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupUpdatePlayerParams)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupUpdatePlayerParamsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupUpdatePlayerParamsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupUpdatePlayerParams represents a UpdatePlayerParams event raised by the Apigroup contract.
type ApigroupUpdatePlayerParams struct {
	RoundAddress common.Address
	Owner        common.Address
	Nwin         *big.Int
	N            *big.Int
	Spos         *big.Int
	Sneg         *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUpdatePlayerParams is a free log retrieval operation binding the contract event 0x549bf9b2e230d5c7984eceaafcffe0407f05426c6cc61641bad8e2cd415ff461.
//
// Solidity: event UpdatePlayerParams(address _roundAddress, address _owner, uint256 _nwin, uint256 _n, uint256 _spos, uint256 _sneg)
func (_Apigroup *ApigroupFilterer) FilterUpdatePlayerParams(opts *bind.FilterOpts) (*ApigroupUpdatePlayerParamsIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "UpdatePlayerParams")
	if err != nil {
		return nil, err
	}
	return &ApigroupUpdatePlayerParamsIterator{contract: _Apigroup.contract, event: "UpdatePlayerParams", logs: logs, sub: sub}, nil
}

// WatchUpdatePlayerParams is a free log subscription operation binding the contract event 0x549bf9b2e230d5c7984eceaafcffe0407f05426c6cc61641bad8e2cd415ff461.
//
// Solidity: event UpdatePlayerParams(address _roundAddress, address _owner, uint256 _nwin, uint256 _n, uint256 _spos, uint256 _sneg)
func (_Apigroup *ApigroupFilterer) WatchUpdatePlayerParams(opts *bind.WatchOpts, sink chan<- *ApigroupUpdatePlayerParams) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "UpdatePlayerParams")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupUpdatePlayerParams)
				if err := _Apigroup.contract.UnpackLog(event, "UpdatePlayerParams", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdatePlayerParams is a log parse operation binding the contract event 0x549bf9b2e230d5c7984eceaafcffe0407f05426c6cc61641bad8e2cd415ff461.
//
// Solidity: event UpdatePlayerParams(address _roundAddress, address _owner, uint256 _nwin, uint256 _n, uint256 _spos, uint256 _sneg)
func (_Apigroup *ApigroupFilterer) ParseUpdatePlayerParams(log types.Log) (*ApigroupUpdatePlayerParams, error) {
	event := new(ApigroupUpdatePlayerParams)
	if err := _Apigroup.contract.UnpackLog(event, "UpdatePlayerParams", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupWithdrawEventIterator is returned from FilterWithdrawEvent and is used to iterate over the raw logs and unpacked data for WithdrawEvent events raised by the Apigroup contract.
type ApigroupWithdrawEventIterator struct {
	Event *ApigroupWithdrawEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupWithdrawEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupWithdrawEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupWithdrawEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupWithdrawEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupWithdrawEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupWithdrawEvent represents a WithdrawEvent event raised by the Apigroup contract.
type ApigroupWithdrawEvent struct {
	Sender common.Address
	Psnap  *big.Int
	Bsnap  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawEvent is a free log retrieval operation binding the contract event 0x5bb95829671915ece371da722f91d5371159095dcabf2f75cd6c53facb7e1bab.
//
// Solidity: event WithdrawEvent(address _sender, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) FilterWithdrawEvent(opts *bind.FilterOpts) (*ApigroupWithdrawEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "WithdrawEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupWithdrawEventIterator{contract: _Apigroup.contract, event: "WithdrawEvent", logs: logs, sub: sub}, nil
}

// WatchWithdrawEvent is a free log subscription operation binding the contract event 0x5bb95829671915ece371da722f91d5371159095dcabf2f75cd6c53facb7e1bab.
//
// Solidity: event WithdrawEvent(address _sender, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) WatchWithdrawEvent(opts *bind.WatchOpts, sink chan<- *ApigroupWithdrawEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "WithdrawEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupWithdrawEvent)
				if err := _Apigroup.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawEvent is a log parse operation binding the contract event 0x5bb95829671915ece371da722f91d5371159095dcabf2f75cd6c53facb7e1bab.
//
// Solidity: event WithdrawEvent(address _sender, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) ParseWithdrawEvent(log types.Log) (*ApigroupWithdrawEvent, error) {
	event := new(ApigroupWithdrawEvent)
	if err := _Apigroup.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
