// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package apigroup

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ApigroupMetaData contains all meta data concerning the Apigroup contract.
var ApigroupMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lotSnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"}],\"name\":\"BuyLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"CreateRoundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"}],\"name\":\"CreatedLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"EnterRoundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLion\",\"type\":\"uint256\"}],\"name\":\"LionDotaEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeFirst\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lotSnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"}],\"name\":\"NewLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"PickEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SposDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_SnegDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_psnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"}],\"name\":\"ReceiveLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_receiveTokens\",\"type\":\"uint256\"}],\"name\":\"SendLotEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_psnap\",\"type\":\"uint256\"}],\"name\":\"StartRoundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roundAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nwin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_spos\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sneg\",\"type\":\"uint256\"}],\"name\":\"UpdatePlayerParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_psnap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bsnap\",\"type\":\"uint256\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofEPData\",\"type\":\"bytes\"}],\"name\":\"BuyLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CreateLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"CreateRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_prevPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prevSnap\",\"type\":\"uint256\"}],\"name\":\"EncodeEP\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetLionDota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initParamsData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"}],\"name\":\"NewLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initParamsData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"playerParamsData\",\"type\":\"bytes\"}],\"name\":\"ReceiveLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initParamsData\",\"type\":\"bytes\"}],\"name\":\"SendLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"UpdateLionDota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofResData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"playerParamsData\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052600160025534801561001557600080fd5b50600080546001600160a01b03191633179055615560806100376000396000f3fe6080604052600436106100c25760003560e01c80635ebb86c01161007f578063c900188411610059578063c9001884146101bd578063d224efc8146101dd578063d53e743e146101fd578063ee70e94b1461021257600080fd5b80635ebb86c01461016857806370ebfc2d14610188578063aa7d7568146101a857600080fd5b80631097e579146100c75780631952a7db146100d15780631c436c50146100f357806320526fa514610113578063257b6e0c146101285780635be4a96c14610148575b600080fd5b6100cf610232565b005b3480156100dd57600080fd5b5060025460405190815260200160405180910390f35b3480156100ff57600080fd5b506100cf61010e36600461133d565b61031b565b34801561011f57600080fd5b506100cf610430565b34801561013457600080fd5b506100cf610143366004611372565b610480565b34801561015457600080fd5b506100cf610163366004611479565b610566565b34801561017457600080fd5b506100cf6101833660046114ef565b61075d565b34801561019457600080fd5b506100cf6101a3366004611479565b6108ab565b3480156101b457600080fd5b506100cf610ad4565b3480156101c957600080fd5b506100cf6101d836600461153f565b610b9e565b3480156101e957600080fd5b506100cf6101f83660046115ed565b611030565b34801561020957600080fd5b506100cf6111f8565b34801561021e57600080fd5b506100cf61022d366004611372565b6112b3565b600154604051631fb4892960e01b81523360048201523460248201526001600160a01b03909116908190631fb4892990604401600060405180830381600087803b15801561027f57600080fd5b505af1158015610293573d6000803e3d6000fd5b50506001546040516001600160a01b0390911692503480156108fc029250906000818181858888f193505050501580156102d1573d6000803e3d6000fd5b50600154604080516001600160a01b0390921682523360208301527fc27ed72edbb571182c3c5aa21b035674fc49c06957440f22d55f7e2bf00f318091015b60405180910390a150565b604051630d6dffc960e31b81526001600160a01b0384166004820152602481018390526044810182905260009073__$02cb286b575382a609bf5f0a09d5c56ef2$__90636b6ffe4890606401600060405180830381865af4158015610384573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103ac91908101906116b8565b9050600073__$02cb286b575382a609bf5f0a09d5c56ef2$__636ae46bc8836040518263ffffffff1660e01b81526004016103e791906116ed565b606060405180830381865af4158015610404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104289190611730565b505050505050565b7f3ef4d8d899911e69f27397d4db19bb259ed769f9798e11e8f99c3bcf32348f1c604051610476906020808252600490820152634865726560e01b604082015260600190565b60405180910390a1565b6000546001600160a01b031633146104d55760405162461bcd60e51b81526020600482015260146024820152732cb7bab03932903737ba103a34329037bbb732b960611b604482015260640160405180910390fd5b6000816040516104e490611318565b908152602001604051809103906000f080158015610506573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03831690811790915560408051918252602082018590529192507ff901c2f537cd421ec196e0b11577d59e041a570ece9cdca8a901ddd7f20b425491015b60405180910390a15050565b60405163f136b3a960e01b815260009073__$02cb286b575382a609bf5f0a09d5c56ef2$__9063f136b3a9906105a09086906004016116ed565b61010060405180830381865af41580156105be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e29190611774565b338152604051630d5c8d7960e31b815290915060009073__$02cb286b575382a609bf5f0a09d5c56ef2$__90636ae46bc8906106229086906004016116ed565b606060405180830381865af415801561063f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106639190611730565b600154604051635eb73f8160e01b81529192506001600160a01b03169060009081908390635eb73f819061069f908b9089908990600401611871565b60408051808303816000875af11580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e191906118b8565b600154602088810151604080516001600160a01b039485168152938e1692840192909252339183019190915260608201526080810183905260a0810182905291935091507f4fc33a0e6a259fb2ce75e5cbd9fdde7d4eefdaac773afbd1a02c1f2fdb2c66f99060c0015b60405180910390a15050505050505050565b604051630f7846b960e11b815260009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90631ef08d72906107979085906004016116ed565b606060405180830381865af41580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d891906118dc565b60015460405163066cf8af60e01b81529192506001600160a01b031690600090829063066cf8af906108109088908790600401611918565b6020604051808303816000875af115801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190611950565b600154604080516001600160a01b039283168152918816602083015281018290529091507f7c63f4ca5f3947a628e97b9822a09acf9382a1c3916ccbf7493097dc2f081ecf9060600160405180910390a15050505050565b604051637479a71760e01b815260009073__$02cb286b575382a609bf5f0a09d5c56ef2$__90637479a717906108e59085906004016116ed565b61010060405180830381865af4158015610903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109279190611774565b338152604051630f7846b960e11b815290915060009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90631ef08d72906109679087906004016116ed565b606060405180830381865af4158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a891906118dc565b600154604051632d5c7a1f60e21b81529192506001600160a01b0316906000908190839063b571e87c906109e4908b9088908a90600401611969565b60408051808303816000875af1158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2691906118b8565b6001548651602080890151908a01516040808b015190519698509496507f0ec6421e5db42f49d5bc9b51a59d5babed4e72573d1b56303b98a9496e3be0219561074b956001600160a01b03909516948f943394909390929091908b908b906001600160a01b03998a16815297891660208901529590971660408701526060860193909352608085019190915260a084015260c083015260e08201929092526101008101919091526101200190565b6001546040805163154faead60e31b815281516001600160a01b03909316926000928392859263aa7d756892600480840193919291829003018187875af1158015610b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4791906118b8565b600154604080516001600160a01b03909216825260208201849052810182905291935091507f87d0d34a259a5bf664a28dc7fdadc47f8abc8fe0f896b1356c050f6d5773418c9060600160405180910390a1505050565b604051630f7846b960e11b815260009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90631ef08d7290610bd89087906004016116ed565b606060405180830381865af4158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1991906118dc565b9050600073__$02cb286b575382a609bf5f0a09d5c56ef2$__63269940a7856040518263ffffffff1660e01b8152600401610c5491906116ed565b61010060405180830381865af4158015610c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c969190611774565b6001600160a01b03871681526040516375543f1160e01b815290915060009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__906375543f1190610cdf9087906004016116ed565b60c060405180830381865af4158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2091906119a8565b6001546040516352ec20d360e01b81529192506001600160a01b03169060609060009083906352ec20d390610d5f908e908a908a908a90600401611a6b565b6000604051808303816000875af1158015610d7e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610da69190810190611ac1565b604051632f131de960e01b8152919350915060009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90632f131de990610de59086906004016116ed565b60c060405180830381865af4158015610e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2691906119a8565b60015481516020808401516040808601516060808801516080808a015185516001600160a01b039a8b1681529990981696890196909652878401949094528601529184015260a0830191909152519192507f549bf9b2e230d5c7984eceaafcffe0407f05426c6cc61641bad8e2cd415ff461919081900360c00190a16000846001600160a01b031663ecd0b5e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190611950565b90506000856001600160a01b031663d571d9de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6c9190611950565b90507ff961f8b2e1723623c5ae736a74446f0a5b8b0d68f8e42035a217e011b9543fb9600160009054906101000a90046001600160a01b03168f8f878b606001518860600151610fbc9190611b08565b8c608001518960800151610fd09190611b08565b604080516001600160a01b039788168152958716602087015293909516928401929092526060830152608082015260a081019190915260c0810183905260e081018490526101000160405180910390a15050505050505050505050505050565b60405163269940a760e01b815260009073__$02cb286b575382a609bf5f0a09d5c56ef2$__9063269940a79061106a9086906004016116ed565b61010060405180830381865af4158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190611774565b3381526040516375543f1160e01b815290915060009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__9063a9e8f663906200063990859060040162002580565b602060405180830381865af415801562000657573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200067d9190620024a3565b60a0830151604051639ed41ba160e01b815260048101919091526024810182905290915060009073__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af4158015620006e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007079190620024a3565b9050600a54816040516020016200072091815260200190565b6040516020818303038152906040528051906020012060001c146200077d5760405162461bcd60e51b81526020600482015260126024820152714e6f7420636f727265637420706172616d7360701b604482015260640162000296565b600e546002546200078f9190620024d3565b4211620007d15760405162461bcd60e51b815260206004820152600f60248201526e697420697320746f6f206561726c7960881b604482015260640162000296565b6000600860009054906101000a90046001600160a01b0316905060006064600b548a60600135846001600160a01b0316639caf34c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000836573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200085c9190620024a3565b62000869906064620025c8565b620008759190620025c8565b620008819190620025e2565b6200088d9190620025e2565b604051632e1a7d4d60e01b8152600481018290529091506001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b158015620008d357600080fd5b505af1158015620008e8573d6000803e3d6000fd5b505060405133925083156108fc02915083906000818181858888f193505050501580156200091a573d6000803e3d6000fd5b506040516302da6f8f60e51b815260009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__90635b4df1e09062000957908d9060040162002605565b602060405180830381865af415801562000975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200099b9190620024a3565b604051639ed41ba160e01b815260a08c013560048201526024810182905290915073__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af4158015620009f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a1f9190620024a3565b60405160200162000a3291815260200190565b60408051601f198184030181529181528151602092830120600a5573__$61628a1579421b817451ee241d1ca321f8$__91639ed41ba1918c01359062000a7b908e018e62002657565b604080516001600160a01b0392909216602083015260009082015260600160408051601f198184030181529082905280516020909101206001600160e01b031960e085901b16825262000ada9291600401918252602082015260400190565b602060405180830381865af415801562000af8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b1e9190620024a3565b60405160200162000b3191815260200190565b60408051808303601f1901815291905280516020909101206009819055600a549b909a5098505050505050505050565b6003546060906000906001600160a01b0316331462000b945760405162461bcd60e51b815260040162000296906200246c565b62000ba536849003840184620024ef565b60405163a9e8f66360e01b815260009073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__9063a9e8f6639062000be190859060040162002580565b602060405180830381865af415801562000bff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c259190620024a3565b60a0830151604051639ed41ba160e01b815260048101919091526024810182905290915060009073__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af415801562000c89573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000caf9190620024a3565b9050600a548160405160200162000cc891815260200190565b6040516020818303038152906040528051906020012060001c1462000d255760405162461bcd60e51b81526020600482015260126024820152714e6f7420636f727265637420706172616d7360701b604482015260640162000296565b600854604051635d961fe960e11b81526001600160a01b03918216918b919082169063bb2c3fd29062000d5f908d908d90600401620026e6565b600060405180830381600087803b15801562000d7a57600080fd5b505af115801562000d8f573d6000803e3d6000fd5b505050506000816001600160a01b03166352c4d14c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000dd4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dfa9190620024a3565b604051636a79fb8d60e01b8152600481018290529091506001600160a01b03841690636a79fb8d906024016020604051808303816000875af115801562000e45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e6b9190620024a3565b5060008b60400135846001600160a01b0316639caf34c46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000eb2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ed89190620024a3565b62000ee4919062002712565b90506000808212620010d25781600b600082825462000f049190620024d3565b9091555062000f1b905060808d01358c8462001f29565b9b509950905073__$61628a1579421b817451ee241d1ca321f8$__639ed41ba160408e013562000f4f60208f018f62002657565b604080516001600160a01b0392909216602083015281018d905260600160408051601f198184030181529082905280516020909101206001600160e01b031960e085901b16825262000fad9291600401918252602082015260400190565b602060405180830381865af415801562000fcb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ff19190620024a3565b6040516020016200100491815260200190565b60408051808303601f19018152908290528051602090910120600955639ed41ba160e01b815260a08c013560048201526024810182905273__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af415801562001078573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200109e9190620024a3565b604051602001620010b191815260200190565b60408051601f198184030181529190528051602090910120600a556200139d565b604051633860bdb560e11b81526004810183905273__$61628a1579421b817451ee241d1ca321f8$__906370c17b6a90602401602060405180830381865af415801562001123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011499190620024a3565b600c60008282546200115c9190620024d3565b9091555050604051633860bdb560e11b815260048101839052620011eb9060808e0135908d9073__$61628a1579421b817451ee241d1ca321f8$__906370c17b6a90602401602060405180830381865af4158015620011bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e59190620024a3565b62002061565b9b509950905073__$61628a1579421b817451ee241d1ca321f8$__639ed41ba160408e01356200121f60208f018f62002657565b604080516001600160a01b0392909216602083015281018d905260600160408051601f198184030181529082905280516020909101206001600160e01b031960e085901b1682526200127d9291600401918252602082015260400190565b602060405180830381865af41580156200129b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012c19190620024a3565b604051602001620012d491815260200190565b60408051808303601f19018152908290528051602090910120600955639ed41ba160e01b815260a08c013560048201526024810182905273__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af415801562001348573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200136e9190620024a3565b6040516020016200138191815260200190565b60408051601f198184030181529190528051602090910120600a555b505050505050505094509492505050565b60035460009081906001600160a01b03163314620013e05760405162461bcd60e51b815260040162000296906200246c565b83600073__$02cb286b575382a609bf5f0a09d5c56ef2$__63893780c9836040518263ffffffff1660e01b81526004016200141c91906200273c565b602060405180830381865af41580156200143a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014609190620024a3565b90506009548114620014a15760405162461bcd60e51b81526020600482015260096024820152682737ba10383937b7b360b91b604482015260640162000296565b816080013582602001351115620014ec5760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f756e672072657360901b604482015260640162000296565b8660006001600160a01b03821663a8fda7796200150d60208b018b62002657565b8a602001358a6040518463ffffffff1660e01b815260040162001533939291906200274d565b6020604051808303816000875af115801562001553573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015799190620024a3565b905073__$c7f8f94eeb4eceb1b6560c0bf9c7729f47$__63ac6ca285620015a460208b018b62002657565b620015b660e08c0160c08d0162002657565b60405160e084811b6001600160e01b03191682526001600160a01b03938416600483015291909216602483015260808c013560448301528b0135606482015260208b0135608482015260608b013560a482015260c401602060405180830381865af41580156200162a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016509190620024a3565b600981905590999098509650505050505050565b6040516bffffffffffffffffffffffff19606087901b1660208201526034810185905260548101849052607481018390526094810182905260009060b40160408051601f1981840301815291905280516020909101209695505050505050565b60035460009081906001600160a01b03163314620016f65760405162461bcd60e51b815260040162000296906200246c565b60005b60055460ff82161015620019525773__$61628a1579421b817451ee241d1ca321f8$__639ed41ba160095460058460ff16815481106200173d576200173d62002795565b6000918252602091829020015460065460405162001770936001600160a01b039093169201918252602082015260400190565b60408051601f198184030181529082905280516020909101206001600160e01b031960e085901b168252620017b19291600401918252602082015260400190565b602060405180830381865af4158015620017cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017f59190620024a3565b600981905550600073__$0c272edc7e2c63ccbc1b64dc4c7fa6e6df$__630772e38360058460ff168154811062001830576200183062002795565b60009182526020822001546040516001600160e01b031960e085901b16815262001870926001600160a01b039092169190819081908190600401620027ab565b602060405180830381865af41580156200188e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018b49190620024a3565b600a54604051639ed41ba160e01b815260048101839052602481019190915290915073__$61628a1579421b817451ee241d1ca321f8$__90639ed41ba190604401602060405180830381865af415801562001913573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019399190620024a3565b600a5550806200194981620027d9565b915050620016f9565b60003060405162001963906200215f565b6001600160a01b039091168152602001604051809103906000f08015801562001990573d6000803e3d6000fd5b509050806001600160a01b031663ed21248c476040518263ffffffff1660e01b81526004016000604051808303818588803b158015620019cf57600080fd5b505af1158015620019e4573d6000803e3d6000fd5b5050600880546001600160a01b0319166001600160a01b038616179055505060095460408051602081019290925201905060408051808303601f190181528282528051602091820120600955600a54908301520160408051601f198184030181529190528051602090910120600a5542600255620f4240600e5560055460065462001a709190620025c8565b600d555050600654600b819055600c555050600954600a549091565b60035460009081906001600160a01b0316331462001abe5760405162461bcd60e51b815260040162000296906200246c565b82600073__$02cb286b575382a609bf5f0a09d5c56ef2$__63893780c9836040518263ffffffff1660e01b815260040162001afa91906200273c565b602060405180830381865af415801562001b18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b3e9190620024a3565b9050600954811462001b7f5760405162461bcd60e51b81526020600482015260096024820152682737ba10383937b7b360b91b604482015260640162000296565b81608001358260200135111562001bca5760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420656e6f756e672072657360901b604482015260640162000296565b600854600d546040805163272bcd3160e21b815290516001600160a01b03909316926020808a0135928592639caf34c4926004808401939192918290030181865afa15801562001c1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c449190620024a3565b62001c509190620025c8565b62001c5c9190620025e2565b8760400151111562001ca45760405162461bcd60e51b815260206004820152601060248201526f696e636f72726563742076616c75652160801b604482015260640162000296565b86516020808901518a926000926001600160a01b03851692639d0b59d2929162001cd1908d018d62002657565b6040808f015190516001600160e01b031960e087901b168152600481019490945260248401929092526001600160a01b0316604483015260208c01356064830152608482015260a4016020604051808303816000875af115801562001d3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d609190620024a3565b905073__$c7f8f94eeb4eceb1b6560c0bf9c7729f47$__637d4716f562001d8b60208b018b62002657565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015260808c0135602483015260208c013560448301528b01356064820152608401602060405180830381865af415801562001ded573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e139190620024a3565b6009819055909a909950975050505050505050565b6003546000906001600160a01b0316331462001e585760405162461bcd60e51b815260040162000296906200246c565b60025460000362001e6857600080fd5b600060405162001e78906200216d565b604051809103906000f08015801562001e95573d6000803e3d6000fd5b50600780546001600160a01b039092166001600160a01b03199092168217905591505090565b6003546000906001600160a01b0316331462001eeb5760405162461bcd60e51b815260040162000296906200246c565b50600a5490565b6003546000906001600160a01b0316331462001f225760405162461bcd60e51b815260040162000296906200246c565b5060095490565b600080606060006064600b5486886060013562001f479190620024d3565b89600d5462001f579190620027fb565b62001f64906064620025c8565b62001f709190620025c8565b62001f7c9190620025e2565b62001f889190620025e2565b62001f949088620024d3565b905062001fa5602087018762002657565b62001fb660208801356001620024d3565b62001fc760408901356001620024d3565b62001fd78860608b0135620024d3565b896080013560405160200162001ff2959493929190620027ab565b60408051601f1981840301815291905291506200205462002017602088018862002657565b6200202860208901356001620024d3565b6200203960408a01356001620024d3565b620020498960608c0135620024d3565b8a6080013562001664565b9350915093509350939050565b600080606060006064600c548688608001356200207f9190620024d3565b6200208c906064620025c8565b620020989190620025e2565b620020a5906064620027fb565b620020b19089620025c8565b620020bd9190620025e2565b9050620020ce602087018762002657565b6020870135620020e460408901356001620024d3565b6060890135620020f98960808c0135620024d3565b6040516020016200210f959493929190620027ab565b60408051601f1981840301815291905291506200205462002134602088018862002657565b60208801356200214a60408a01356001620024d3565b60608a0135620001c28a60808d0135620024d3565b610502806200281283390190565b610bde8062002d1483390190565b80356001600160a01b03811681146200219357600080fd5b919050565b600060608284031215620021ab57600080fd5b6040516060810181811067ffffffffffffffff82111715620021dd57634e487b7160e01b600052604160045260246000fd5b80604052508091508235815260208301356020820152604083013560408201525092915050565b600080608083850312156200221857600080fd5b62002223836200217b565b915062002234846020850162002198565b90509250929050565b600080604083850312156200225157600080fd5b6200225c836200217b565b946020939093013593505050565b600060c082840312156200227d57600080fd5b50919050565b600061010082840312156200227d57600080fd5b6000806101c08385031215620022ac57600080fd5b620022b884846200226a565b9150620022348460c0850162002283565b6000606082840312156200227d57600080fd5b6000806000806102408587031215620022f457600080fd5b620022ff856200217b565b9350620023108660208701620022c9565b925062002321866080870162002283565b9150620023338661018087016200226a565b905092959194509250565b604081526000835180604084015260005b818110156200236e57602081870181015160608684010152016200234f565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b60008060006101808486031215620023ac57600080fd5b620023b7846200217b565b9250620023c8856020860162002283565b9150620023da856101208601620022c9565b90509250925092565b600080600080600060a08688031215620023fc57600080fd5b62002407866200217b565b97602087013597506040870135966060810135965060800135945092505050565b600080600061018084860312156200243f57600080fd5b6200244a846200217b565b92506200245b856020860162002198565b9150620023da856080860162002283565b6020808252601a908201527f49746073206e6f7420612067726f757020636f6e747261637421000000000000604082015260600190565b600060208284031215620024b657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115620024e957620024e9620024bd565b92915050565b600060c082840312156200250257600080fd5b60405160c0810181811067ffffffffffffffff821117156200253457634e487b7160e01b600052604160045260246000fd5b60405262002542836200217b565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b81516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0918201519181019190915260c00190565b8082028115828204841417620024e957620024e9620024bd565b6000826200260057634e487b7160e01b600052601260045260246000fd5b500490565b60c081016001600160a01b036200261c846200217b565b1682526020830135602083015260408301356040830152606083013560608301526080830135608083015260a083013560a083015292915050565b6000602082840312156200266a57600080fd5b62002675826200217b565b9392505050565b6001600160a01b038062002690836200217b565b1683526020820135602084015260408201356040840152606082013560608401526080820135608084015260a082013560a084015280620026d460c084016200217b565b1660c08401525060e090810135910152565b82358152602080840135908201526040808401359082015261016081016200267560608301846200267c565b8181036000831280158383131683831282161715620027355762002735620024bd565b5092915050565b6101008101620024e982846200267c565b6001600160a01b0384811682526020820184905260a08201908062002772856200217b565b166040840152506020830135606083015260408301356080830152949350505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b600060ff821660ff8103620027f257620027f2620024bd565b60010192915050565b81810381811115620024e957620024e9620024bd56fe608060405234801561001057600080fd5b5060405161050238038061050283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61046f806100936000396000f3fe60806040526004361061007b5760003560e01c80639caf34c41161004e5780639caf34c414610109578063a2e1cd9e1461011e578063aa3dcd3f1461013e578063ed21248c1461015e57600080fd5b80632e1a7d4d146100805780635360a15c146100a25780636a79fb8d146100d45780636c716898146100f4575b600080fd5b34801561008c57600080fd5b506100a061009b3660046103ab565b610166565b005b3480156100ae57600080fd5b506100c26100bd3660046103ab565b610250565b60405190815260200160405180910390f35b3480156100e057600080fd5b506100c26100ef3660046103ab565b6102e2565b34801561010057600080fd5b506002546100c2565b34801561011557600080fd5b506001546100c2565b34801561012a57600080fd5b506100c26101393660046103ab565b610378565b34801561014a57600080fd5b506100c26101593660046103ab565b610385565b6100a0610392565b6000546001600160a01b031633146101b35760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd0818481c9bdd5b9960aa1b60448201526064015b60405180910390fd5b806101bd60015490565b116101fc5760405162461bcd60e51b815260206004820152600f60248201526e0dcdee840cadcdeeaced040ae8aa89608b1b60448201526064016101aa565b806001600082825461020e91906103da565b9091555050600080546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561024c573d6000803e3d6000fd5b5050565b60008160015410156102975760405162461bcd60e51b815260206004820152601060248201526f0dcdee840cadcdeeaced0e840ae8aa8960831b60448201526064016101aa565b81600160008282546102a991906103da565b909155506102ba90508260026103ed565b600260008282546102cb9190610404565b909155506102dc90508260026103ed565b92915050565b60008160025410156103285760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f756768742044414960881b60448201526064016101aa565b816002600082825461033a91906103da565b9091555061034b9050600283610417565b6001600082825461035c9190610404565b9091555061036d9050600283610417565b6102dc906002610404565b60006102dc8260026103ed565b60006102dc600283610417565b34600160008282546103a49190610404565b9091555050565b6000602082840312156103bd57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102dc576102dc6103c4565b80820281158282048414176102dc576102dc6103c4565b808201808211156102dc576102dc6103c4565b60008261043457634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220106aa5ac1269c5e06aef53ef6b3a9d3218886d8d5340d8e0a4847a6a9f79ca6e64736f6c63430008110033608060405234801561001057600080fd5b50600080546001600160a01b0319163317905560405161004d9060200160208082526006908201526518db1bdcd95960d21b604082015260600190565b60408051601f198184030181529190528051602090910120600355610b67806100776000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639d0b59d21161005b5780639d0b59d2146100d3578063a8fda779146100e6578063bb2c3fd2146100f9578063ee9928a61461010c57600080fd5b806322e1ee7c1461008d5780632ca5ead3146100a257806352c4d14c146100b557806383a69267146100cb575b600080fd5b6100a061009b366004610921565b61011f565b005b6100a06100b0366004610944565b61025a565b6004545b60405190815260200160405180910390f35b6005546100b9565b6100b96100e1366004610979565b610296565b6100b96100f43660046109c0565b6103f8565b6100a06101073660046109fd565b61061c565b6100a061011a366004610944565b610898565b6000546001600160a01b031633146101525760405162461bcd60e51b815260040161014990610a3f565b60405180910390fd5b60025460408051833560208281019190915280850135828401528285013560608084019190915283518084039091018152608090920190925280519101208291146101d05760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c1c9bdbd9881a5b9a5d60921b6044820152606401610149565b600042116102135760405162461bcd60e51b815260206004820152601060248201526f4e6f7420636f72726563742074696d6560801b6044820152606401610149565b60405160200161023b906020808252600490820152631dd85a5d60e21b604082015260600190565b60408051601f1981840301815291905280516020909101206003555050565b6000546001600160a01b031633146102845760405162461bcd60e51b815260040161014990610a3f565b6000811161029157600080fd5b600555565b600080546001600160a01b031633146102c15760405162461bcd60e51b815260040161014990610a3f565b6040516020016102eb9060208082526006908201526518db1bdcd95960d21b604082015260600190565b6040516020818303038152906040528051906020012060001c6003541461033e5760405162461bcd60e51b81526020600482015260076024820152664e6f74206e657760c81b6044820152606401610149565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526000605482015260740160408051808303601f190181528282528051602091820120600155820188905281018690526060810183905260800160408051808303601f1901815282825280516020918201206002558083015260059082015264656d70747960d81b606082015260800160408051601f1981840301815291905280516020909101206003555060015495945050505050565b600080546001600160a01b031633146104235760405162461bcd60e51b815260040161014990610a3f565b8183600073__$02cb286b575382a609bf5f0a09d5c56ef2$__637bb3f4a7846040518263ffffffff1660e01b815260040161045e9190610a76565b602060405180830381865af415801561047b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049f9190610aa8565b905060015481146104f25760405162461bcd60e51b815260206004820152601860248201527f4e6f742072696768742070726576696f7573206f776e657200000000000000006044820152606401610149565b826020013582116105455760405162461bcd60e51b815260206004820152601760248201527f4e6577207072696365206c657373207468616e206f6c640000000000000000006044820152606401610149565b60405160200161056e90602080825260059082015264656d70747960d81b604082015260600190565b6040516020818303038152906040528051906020012060001c600354146105c35760405162461bcd60e51b81526020600482015260096024820152686e6f7420656d70747960b81b6044820152606401610149565b6001546040516bffffffffffffffffffffffff1960608a901b16602082015260348101889052605481019190915260740160408051808303601f1901815291905280516020909101206001819055979650505050505050565b6000546001600160a01b031633146106465760405162461bcd60e51b815260040161014990610a3f565b60025460408051843560208281019190915280860135828401528286013560608084019190915283518084039091018152608090920190925280519101208391146106c45760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c1c9bdbd9881a5b9a5d60921b6044820152606401610149565b81600073__$02cb286b575382a609bf5f0a09d5c56ef2$__63cc5a0271836040518263ffffffff1660e01b81526004016106fe9190610ac1565b602060405180830381865af415801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190610aa8565b9050600154811461078a5760405162461bcd60e51b81526020600482015260156024820152742737ba103934b3b43a10383937b7b31037bbb732b960591b6044820152606401610149565b6040516020016107b2906020808252600490820152631dd85a5d60e21b604082015260600190565b6040516020818303038152906040528051906020012060001c600354146108095760405162461bcd60e51b815260206004820152600b60248201526a6e6f742077616974696e6760a81b6044820152606401610149565b6000421161084c5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420636f72726563742074696d6560801b6044820152606401610149565b6040516020016108769060208082526006908201526518db1bdcd95960d21b604082015260600190565b60408051601f1981840301815291905280516020909101206003555050505050565b6000546001600160a01b031633146108c25760405162461bcd60e51b815260040161014990610a3f565b600081116109045760405162461bcd60e51b815260206004820152600f60248201526e756e636f72726563742076616c756560881b6044820152606401610149565b600455565b60006060828403121561091b57600080fd5b50919050565b60006060828403121561093357600080fd5b61093d8383610909565b9392505050565b60006020828403121561095657600080fd5b5035919050565b80356001600160a01b038116811461097457600080fd5b919050565b600080600080600060a0868803121561099157600080fd5b85359450602086013593506109a86040870161095d565b94979396509394606081013594506080013592915050565b600080600060a084860312156109d557600080fd5b6109de8461095d565b9250602084013591506109f48560408601610909565b90509250925092565b600080828403610160811215610a1257600080fd5b610a1c8585610909565b9250610100605f1982011215610a3157600080fd5b506060830190509250929050565b6020808252601a908201527f49746073206e6f74206120726f756e6420636f6e747261637421000000000000604082015260600190565b606081016001600160a01b03610a8b8461095d565b168252602083013560208301526040830135604083015292915050565b600060208284031215610aba57600080fd5b5051919050565b61010081016001600160a01b0380610ad88561095d565b1683526020840135602084015260408401356040840152606084013560608401526080840135608084015260a084013560a084015280610b1a60c0860161095d565b1660c08401525060e083013560e08301529291505056fea26469706673582212203c86f8e4d7433662e8f83237140c2a1dcf9a66bfa4f716a48a4da4a7137ce3e664736f6c63430008110033a26469706673582212208327cc8cf4536df206201032188864e0d5d3d8fe1677d9f0c34d7d4f4726d6ac64736f6c63430008110033a26469706673582212206efde3fd05e14c4af628e363dc1f12d0e142cdd534681513fef3298f319933e164736f6c63430008110033",
}

// ApigroupABI is the input ABI used to generate the binding from.
// Deprecated: Use ApigroupMetaData.ABI instead.
var ApigroupABI = ApigroupMetaData.ABI

// ApigroupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ApigroupMetaData.Bin instead.
var ApigroupBin = ApigroupMetaData.Bin

// DeployApigroup deploys a new Ethereum contract, binding an instance of Apigroup to it.
func DeployApigroup(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Apigroup, error) {
	parsed, err := ApigroupMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ApigroupBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Apigroup{ApigroupCaller: ApigroupCaller{contract: contract}, ApigroupTransactor: ApigroupTransactor{contract: contract}, ApigroupFilterer: ApigroupFilterer{contract: contract}}, nil
}

// Apigroup is an auto generated Go binding around an Ethereum contract.
type Apigroup struct {
	ApigroupCaller     // Read-only binding to the contract
	ApigroupTransactor // Write-only binding to the contract
	ApigroupFilterer   // Log filterer for contract events
}

// ApigroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type ApigroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApigroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ApigroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApigroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ApigroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApigroupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ApigroupSession struct {
	Contract     *Apigroup         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApigroupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ApigroupCallerSession struct {
	Contract *ApigroupCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ApigroupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ApigroupTransactorSession struct {
	Contract     *ApigroupTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ApigroupRaw is an auto generated low-level Go binding around an Ethereum contract.
type ApigroupRaw struct {
	Contract *Apigroup // Generic contract binding to access the raw methods on
}

// ApigroupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ApigroupCallerRaw struct {
	Contract *ApigroupCaller // Generic read-only contract binding to access the raw methods on
}

// ApigroupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ApigroupTransactorRaw struct {
	Contract *ApigroupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewApigroup creates a new instance of Apigroup, bound to a specific deployed contract.
func NewApigroup(address common.Address, backend bind.ContractBackend) (*Apigroup, error) {
	contract, err := bindApigroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Apigroup{ApigroupCaller: ApigroupCaller{contract: contract}, ApigroupTransactor: ApigroupTransactor{contract: contract}, ApigroupFilterer: ApigroupFilterer{contract: contract}}, nil
}

// NewApigroupCaller creates a new read-only instance of Apigroup, bound to a specific deployed contract.
func NewApigroupCaller(address common.Address, caller bind.ContractCaller) (*ApigroupCaller, error) {
	contract, err := bindApigroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ApigroupCaller{contract: contract}, nil
}

// NewApigroupTransactor creates a new write-only instance of Apigroup, bound to a specific deployed contract.
func NewApigroupTransactor(address common.Address, transactor bind.ContractTransactor) (*ApigroupTransactor, error) {
	contract, err := bindApigroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ApigroupTransactor{contract: contract}, nil
}

// NewApigroupFilterer creates a new log filterer instance of Apigroup, bound to a specific deployed contract.
func NewApigroupFilterer(address common.Address, filterer bind.ContractFilterer) (*ApigroupFilterer, error) {
	contract, err := bindApigroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ApigroupFilterer{contract: contract}, nil
}

// bindApigroup binds a generic wrapper to an already deployed contract.
func bindApigroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ApigroupABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Apigroup *ApigroupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Apigroup.Contract.ApigroupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Apigroup *ApigroupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.Contract.ApigroupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Apigroup *ApigroupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Apigroup.Contract.ApigroupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Apigroup *ApigroupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Apigroup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Apigroup *ApigroupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Apigroup *ApigroupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Apigroup.Contract.contract.Transact(opts, method, params...)
}

// EncodeEP is a free data retrieval call binding the contract method 0x1c436c50.
//
// Solidity: function EncodeEP(address _prevOwner, uint256 _prevPrice, uint256 _prevSnap) view returns()
func (_Apigroup *ApigroupCaller) EncodeEP(opts *bind.CallOpts, _prevOwner common.Address, _prevPrice *big.Int, _prevSnap *big.Int) error {
	var out []interface{}
	err := _Apigroup.contract.Call(opts, &out, "EncodeEP", _prevOwner, _prevPrice, _prevSnap)

	if err != nil {
		return err
	}

	return err

}

// EncodeEP is a free data retrieval call binding the contract method 0x1c436c50.
//
// Solidity: function EncodeEP(address _prevOwner, uint256 _prevPrice, uint256 _prevSnap) view returns()
func (_Apigroup *ApigroupSession) EncodeEP(_prevOwner common.Address, _prevPrice *big.Int, _prevSnap *big.Int) error {
	return _Apigroup.Contract.EncodeEP(&_Apigroup.CallOpts, _prevOwner, _prevPrice, _prevSnap)
}

// EncodeEP is a free data retrieval call binding the contract method 0x1c436c50.
//
// Solidity: function EncodeEP(address _prevOwner, uint256 _prevPrice, uint256 _prevSnap) view returns()
func (_Apigroup *ApigroupCallerSession) EncodeEP(_prevOwner common.Address, _prevPrice *big.Int, _prevSnap *big.Int) error {
	return _Apigroup.Contract.EncodeEP(&_Apigroup.CallOpts, _prevOwner, _prevPrice, _prevSnap)
}

// GetLionDota is a free data retrieval call binding the contract method 0x1952a7db.
//
// Solidity: function GetLionDota() view returns(uint256)
func (_Apigroup *ApigroupCaller) GetLionDota(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Apigroup.contract.Call(opts, &out, "GetLionDota")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLionDota is a free data retrieval call binding the contract method 0x1952a7db.
//
// Solidity: function GetLionDota() view returns(uint256)
func (_Apigroup *ApigroupSession) GetLionDota() (*big.Int, error) {
	return _Apigroup.Contract.GetLionDota(&_Apigroup.CallOpts)
}

// GetLionDota is a free data retrieval call binding the contract method 0x1952a7db.
//
// Solidity: function GetLionDota() view returns(uint256)
func (_Apigroup *ApigroupCallerSession) GetLionDota() (*big.Int, error) {
	return _Apigroup.Contract.GetLionDota(&_Apigroup.CallOpts)
}

// BuyLot is a paid mutator transaction binding the contract method 0x5be4a96c.
//
// Solidity: function BuyLot(address _lotAddr, bytes proofResData, bytes proofEPData) returns()
func (_Apigroup *ApigroupTransactor) BuyLot(opts *bind.TransactOpts, _lotAddr common.Address, proofResData []byte, proofEPData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "BuyLot", _lotAddr, proofResData, proofEPData)
}

// BuyLot is a paid mutator transaction binding the contract method 0x5be4a96c.
//
// Solidity: function BuyLot(address _lotAddr, bytes proofResData, bytes proofEPData) returns()
func (_Apigroup *ApigroupSession) BuyLot(_lotAddr common.Address, proofResData []byte, proofEPData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.BuyLot(&_Apigroup.TransactOpts, _lotAddr, proofResData, proofEPData)
}

// BuyLot is a paid mutator transaction binding the contract method 0x5be4a96c.
//
// Solidity: function BuyLot(address _lotAddr, bytes proofResData, bytes proofEPData) returns()
func (_Apigroup *ApigroupTransactorSession) BuyLot(_lotAddr common.Address, proofResData []byte, proofEPData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.BuyLot(&_Apigroup.TransactOpts, _lotAddr, proofResData, proofEPData)
}

// CreateLot is a paid mutator transaction binding the contract method 0xd53e743e.
//
// Solidity: function CreateLot() returns()
func (_Apigroup *ApigroupTransactor) CreateLot(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "CreateLot")
}

// CreateLot is a paid mutator transaction binding the contract method 0xd53e743e.
//
// Solidity: function CreateLot() returns()
func (_Apigroup *ApigroupSession) CreateLot() (*types.Transaction, error) {
	return _Apigroup.Contract.CreateLot(&_Apigroup.TransactOpts)
}

// CreateLot is a paid mutator transaction binding the contract method 0xd53e743e.
//
// Solidity: function CreateLot() returns()
func (_Apigroup *ApigroupTransactorSession) CreateLot() (*types.Transaction, error) {
	return _Apigroup.Contract.CreateLot(&_Apigroup.TransactOpts)
}

// CreateRound is a paid mutator transaction binding the contract method 0x257b6e0c.
//
// Solidity: function CreateRound(uint256 _deposit) returns()
func (_Apigroup *ApigroupTransactor) CreateRound(opts *bind.TransactOpts, _deposit *big.Int) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "CreateRound", _deposit)
}

// CreateRound is a paid mutator transaction binding the contract method 0x257b6e0c.
//
// Solidity: function CreateRound(uint256 _deposit) returns()
func (_Apigroup *ApigroupSession) CreateRound(_deposit *big.Int) (*types.Transaction, error) {
	return _Apigroup.Contract.CreateRound(&_Apigroup.TransactOpts, _deposit)
}

// CreateRound is a paid mutator transaction binding the contract method 0x257b6e0c.
//
// Solidity: function CreateRound(uint256 _deposit) returns()
func (_Apigroup *ApigroupTransactorSession) CreateRound(_deposit *big.Int) (*types.Transaction, error) {
	return _Apigroup.Contract.CreateRound(&_Apigroup.TransactOpts, _deposit)
}

// Enter is a paid mutator transaction binding the contract method 0x1097e579.
//
// Solidity: function Enter() payable returns()
func (_Apigroup *ApigroupTransactor) Enter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "Enter")
}

// Enter is a paid mutator transaction binding the contract method 0x1097e579.
//
// Solidity: function Enter() payable returns()
func (_Apigroup *ApigroupSession) Enter() (*types.Transaction, error) {
	return _Apigroup.Contract.Enter(&_Apigroup.TransactOpts)
}

// Enter is a paid mutator transaction binding the contract method 0x1097e579.
//
// Solidity: function Enter() payable returns()
func (_Apigroup *ApigroupTransactorSession) Enter() (*types.Transaction, error) {
	return _Apigroup.Contract.Enter(&_Apigroup.TransactOpts)
}

// NewLot is a paid mutator transaction binding the contract method 0x70ebfc2d.
//
// Solidity: function NewLot(address _lotAddr, bytes initParamsData, bytes proofResData) returns()
func (_Apigroup *ApigroupTransactor) NewLot(opts *bind.TransactOpts, _lotAddr common.Address, initParamsData []byte, proofResData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "NewLot", _lotAddr, initParamsData, proofResData)
}

// NewLot is a paid mutator transaction binding the contract method 0x70ebfc2d.
//
// Solidity: function NewLot(address _lotAddr, bytes initParamsData, bytes proofResData) returns()
func (_Apigroup *ApigroupSession) NewLot(_lotAddr common.Address, initParamsData []byte, proofResData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.NewLot(&_Apigroup.TransactOpts, _lotAddr, initParamsData, proofResData)
}

// NewLot is a paid mutator transaction binding the contract method 0x70ebfc2d.
//
// Solidity: function NewLot(address _lotAddr, bytes initParamsData, bytes proofResData) returns()
func (_Apigroup *ApigroupTransactorSession) NewLot(_lotAddr common.Address, initParamsData []byte, proofResData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.NewLot(&_Apigroup.TransactOpts, _lotAddr, initParamsData, proofResData)
}

// Pick is a paid mutator transaction binding the contract method 0x20526fa5.
//
// Solidity: function Pick() returns()
func (_Apigroup *ApigroupTransactor) Pick(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "Pick")
}

// Pick is a paid mutator transaction binding the contract method 0x20526fa5.
//
// Solidity: function Pick() returns()
func (_Apigroup *ApigroupSession) Pick() (*types.Transaction, error) {
	return _Apigroup.Contract.Pick(&_Apigroup.TransactOpts)
}

// Pick is a paid mutator transaction binding the contract method 0x20526fa5.
//
// Solidity: function Pick() returns()
func (_Apigroup *ApigroupTransactorSession) Pick() (*types.Transaction, error) {
	return _Apigroup.Contract.Pick(&_Apigroup.TransactOpts)
}

// ReceiveLot is a paid mutator transaction binding the contract method 0xc9001884.
//
// Solidity: function ReceiveLot(address _lotAddr, address _owner, bytes initParamsData, bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupTransactor) ReceiveLot(opts *bind.TransactOpts, _lotAddr common.Address, _owner common.Address, initParamsData []byte, proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "ReceiveLot", _lotAddr, _owner, initParamsData, proofResData, playerParamsData)
}

// ReceiveLot is a paid mutator transaction binding the contract method 0xc9001884.
//
// Solidity: function ReceiveLot(address _lotAddr, address _owner, bytes initParamsData, bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupSession) ReceiveLot(_lotAddr common.Address, _owner common.Address, initParamsData []byte, proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.ReceiveLot(&_Apigroup.TransactOpts, _lotAddr, _owner, initParamsData, proofResData, playerParamsData)
}

// ReceiveLot is a paid mutator transaction binding the contract method 0xc9001884.
//
// Solidity: function ReceiveLot(address _lotAddr, address _owner, bytes initParamsData, bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupTransactorSession) ReceiveLot(_lotAddr common.Address, _owner common.Address, initParamsData []byte, proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.ReceiveLot(&_Apigroup.TransactOpts, _lotAddr, _owner, initParamsData, proofResData, playerParamsData)
}

// SendLot is a paid mutator transaction binding the contract method 0x5ebb86c0.
//
// Solidity: function SendLot(address _lotAddr, bytes initParamsData) returns()
func (_Apigroup *ApigroupTransactor) SendLot(opts *bind.TransactOpts, _lotAddr common.Address, initParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "SendLot", _lotAddr, initParamsData)
}

// SendLot is a paid mutator transaction binding the contract method 0x5ebb86c0.
//
// Solidity: function SendLot(address _lotAddr, bytes initParamsData) returns()
func (_Apigroup *ApigroupSession) SendLot(_lotAddr common.Address, initParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.SendLot(&_Apigroup.TransactOpts, _lotAddr, initParamsData)
}

// SendLot is a paid mutator transaction binding the contract method 0x5ebb86c0.
//
// Solidity: function SendLot(address _lotAddr, bytes initParamsData) returns()
func (_Apigroup *ApigroupTransactorSession) SendLot(_lotAddr common.Address, initParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.SendLot(&_Apigroup.TransactOpts, _lotAddr, initParamsData)
}

// StartRound is a paid mutator transaction binding the contract method 0xaa7d7568.
//
// Solidity: function StartRound() returns()
func (_Apigroup *ApigroupTransactor) StartRound(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "StartRound")
}

// StartRound is a paid mutator transaction binding the contract method 0xaa7d7568.
//
// Solidity: function StartRound() returns()
func (_Apigroup *ApigroupSession) StartRound() (*types.Transaction, error) {
	return _Apigroup.Contract.StartRound(&_Apigroup.TransactOpts)
}

// StartRound is a paid mutator transaction binding the contract method 0xaa7d7568.
//
// Solidity: function StartRound() returns()
func (_Apigroup *ApigroupTransactorSession) StartRound() (*types.Transaction, error) {
	return _Apigroup.Contract.StartRound(&_Apigroup.TransactOpts)
}

// UpdateLionDota is a paid mutator transaction binding the contract method 0xee70e94b.
//
// Solidity: function UpdateLionDota(uint256 data) returns()
func (_Apigroup *ApigroupTransactor) UpdateLionDota(opts *bind.TransactOpts, data *big.Int) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "UpdateLionDota", data)
}

// UpdateLionDota is a paid mutator transaction binding the contract method 0xee70e94b.
//
// Solidity: function UpdateLionDota(uint256 data) returns()
func (_Apigroup *ApigroupSession) UpdateLionDota(data *big.Int) (*types.Transaction, error) {
	return _Apigroup.Contract.UpdateLionDota(&_Apigroup.TransactOpts, data)
}

// UpdateLionDota is a paid mutator transaction binding the contract method 0xee70e94b.
//
// Solidity: function UpdateLionDota(uint256 data) returns()
func (_Apigroup *ApigroupTransactorSession) UpdateLionDota(data *big.Int) (*types.Transaction, error) {
	return _Apigroup.Contract.UpdateLionDota(&_Apigroup.TransactOpts, data)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd224efc8.
//
// Solidity: function Withdraw(bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupTransactor) Withdraw(opts *bind.TransactOpts, proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.contract.Transact(opts, "Withdraw", proofResData, playerParamsData)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd224efc8.
//
// Solidity: function Withdraw(bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupSession) Withdraw(proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.Withdraw(&_Apigroup.TransactOpts, proofResData, playerParamsData)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd224efc8.
//
// Solidity: function Withdraw(bytes proofResData, bytes playerParamsData) returns()
func (_Apigroup *ApigroupTransactorSession) Withdraw(proofResData []byte, playerParamsData []byte) (*types.Transaction, error) {
	return _Apigroup.Contract.Withdraw(&_Apigroup.TransactOpts, proofResData, playerParamsData)
}

// ApigroupBuyLotEventIterator is returned from FilterBuyLotEvent and is used to iterate over the raw logs and unpacked data for BuyLotEvent events raised by the Apigroup contract.
type ApigroupBuyLotEventIterator struct {
	Event *ApigroupBuyLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupBuyLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupBuyLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupBuyLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupBuyLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupBuyLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupBuyLotEvent represents a BuyLotEvent event raised by the Apigroup contract.
type ApigroupBuyLotEvent struct {
	RoundAddress common.Address
	LotAddr      common.Address
	Sender       common.Address
	Price        *big.Int
	LotSnap      *big.Int
	Bsnap        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterBuyLotEvent is a free log retrieval operation binding the contract event 0x4fc33a0e6a259fb2ce75e5cbd9fdde7d4eefdaac773afbd1a02c1f2fdb2c66f9.
//
// Solidity: event BuyLotEvent(address _roundAddress, address _lotAddr, address _sender, uint256 _price, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) FilterBuyLotEvent(opts *bind.FilterOpts) (*ApigroupBuyLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "BuyLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupBuyLotEventIterator{contract: _Apigroup.contract, event: "BuyLotEvent", logs: logs, sub: sub}, nil
}

// WatchBuyLotEvent is a free log subscription operation binding the contract event 0x4fc33a0e6a259fb2ce75e5cbd9fdde7d4eefdaac773afbd1a02c1f2fdb2c66f9.
//
// Solidity: event BuyLotEvent(address _roundAddress, address _lotAddr, address _sender, uint256 _price, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) WatchBuyLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupBuyLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "BuyLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupBuyLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "BuyLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBuyLotEvent is a log parse operation binding the contract event 0x4fc33a0e6a259fb2ce75e5cbd9fdde7d4eefdaac773afbd1a02c1f2fdb2c66f9.
//
// Solidity: event BuyLotEvent(address _roundAddress, address _lotAddr, address _sender, uint256 _price, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) ParseBuyLotEvent(log types.Log) (*ApigroupBuyLotEvent, error) {
	event := new(ApigroupBuyLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "BuyLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupCreateRoundEventIterator is returned from FilterCreateRoundEvent and is used to iterate over the raw logs and unpacked data for CreateRoundEvent events raised by the Apigroup contract.
type ApigroupCreateRoundEventIterator struct {
	Event *ApigroupCreateRoundEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupCreateRoundEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupCreateRoundEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupCreateRoundEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupCreateRoundEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupCreateRoundEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupCreateRoundEvent represents a CreateRoundEvent event raised by the Apigroup contract.
type ApigroupCreateRoundEvent struct {
	RoundAddress common.Address
	Deposit      *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateRoundEvent is a free log retrieval operation binding the contract event 0xf901c2f537cd421ec196e0b11577d59e041a570ece9cdca8a901ddd7f20b4254.
//
// Solidity: event CreateRoundEvent(address _roundAddress, uint256 _deposit)
func (_Apigroup *ApigroupFilterer) FilterCreateRoundEvent(opts *bind.FilterOpts) (*ApigroupCreateRoundEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "CreateRoundEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupCreateRoundEventIterator{contract: _Apigroup.contract, event: "CreateRoundEvent", logs: logs, sub: sub}, nil
}

// WatchCreateRoundEvent is a free log subscription operation binding the contract event 0xf901c2f537cd421ec196e0b11577d59e041a570ece9cdca8a901ddd7f20b4254.
//
// Solidity: event CreateRoundEvent(address _roundAddress, uint256 _deposit)
func (_Apigroup *ApigroupFilterer) WatchCreateRoundEvent(opts *bind.WatchOpts, sink chan<- *ApigroupCreateRoundEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "CreateRoundEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupCreateRoundEvent)
				if err := _Apigroup.contract.UnpackLog(event, "CreateRoundEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateRoundEvent is a log parse operation binding the contract event 0xf901c2f537cd421ec196e0b11577d59e041a570ece9cdca8a901ddd7f20b4254.
//
// Solidity: event CreateRoundEvent(address _roundAddress, uint256 _deposit)
func (_Apigroup *ApigroupFilterer) ParseCreateRoundEvent(log types.Log) (*ApigroupCreateRoundEvent, error) {
	event := new(ApigroupCreateRoundEvent)
	if err := _Apigroup.contract.UnpackLog(event, "CreateRoundEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupCreatedLotEventIterator is returned from FilterCreatedLotEvent and is used to iterate over the raw logs and unpacked data for CreatedLotEvent events raised by the Apigroup contract.
type ApigroupCreatedLotEventIterator struct {
	Event *ApigroupCreatedLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupCreatedLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupCreatedLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupCreatedLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupCreatedLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupCreatedLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupCreatedLotEvent represents a CreatedLotEvent event raised by the Apigroup contract.
type ApigroupCreatedLotEvent struct {
	RoundAddress common.Address
	LotAddr      common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreatedLotEvent is a free log retrieval operation binding the contract event 0x918ba15a8dc4906fa0a8ac698245a6a565c4724cf9a27b8be97bf3af6e315035.
//
// Solidity: event CreatedLotEvent(address _roundAddress, address _lotAddr)
func (_Apigroup *ApigroupFilterer) FilterCreatedLotEvent(opts *bind.FilterOpts) (*ApigroupCreatedLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "CreatedLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupCreatedLotEventIterator{contract: _Apigroup.contract, event: "CreatedLotEvent", logs: logs, sub: sub}, nil
}

// WatchCreatedLotEvent is a free log subscription operation binding the contract event 0x918ba15a8dc4906fa0a8ac698245a6a565c4724cf9a27b8be97bf3af6e315035.
//
// Solidity: event CreatedLotEvent(address _roundAddress, address _lotAddr)
func (_Apigroup *ApigroupFilterer) WatchCreatedLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupCreatedLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "CreatedLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupCreatedLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "CreatedLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedLotEvent is a log parse operation binding the contract event 0x918ba15a8dc4906fa0a8ac698245a6a565c4724cf9a27b8be97bf3af6e315035.
//
// Solidity: event CreatedLotEvent(address _roundAddress, address _lotAddr)
func (_Apigroup *ApigroupFilterer) ParseCreatedLotEvent(log types.Log) (*ApigroupCreatedLotEvent, error) {
	event := new(ApigroupCreatedLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "CreatedLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupEnterRoundEventIterator is returned from FilterEnterRoundEvent and is used to iterate over the raw logs and unpacked data for EnterRoundEvent events raised by the Apigroup contract.
type ApigroupEnterRoundEventIterator struct {
	Event *ApigroupEnterRoundEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupEnterRoundEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupEnterRoundEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupEnterRoundEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupEnterRoundEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupEnterRoundEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupEnterRoundEvent represents a EnterRoundEvent event raised by the Apigroup contract.
type ApigroupEnterRoundEvent struct {
	RoundAddress common.Address
	Sender       common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterEnterRoundEvent is a free log retrieval operation binding the contract event 0xc27ed72edbb571182c3c5aa21b035674fc49c06957440f22d55f7e2bf00f3180.
//
// Solidity: event EnterRoundEvent(address _roundAddress, address _sender)
func (_Apigroup *ApigroupFilterer) FilterEnterRoundEvent(opts *bind.FilterOpts) (*ApigroupEnterRoundEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "EnterRoundEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupEnterRoundEventIterator{contract: _Apigroup.contract, event: "EnterRoundEvent", logs: logs, sub: sub}, nil
}

// WatchEnterRoundEvent is a free log subscription operation binding the contract event 0xc27ed72edbb571182c3c5aa21b035674fc49c06957440f22d55f7e2bf00f3180.
//
// Solidity: event EnterRoundEvent(address _roundAddress, address _sender)
func (_Apigroup *ApigroupFilterer) WatchEnterRoundEvent(opts *bind.WatchOpts, sink chan<- *ApigroupEnterRoundEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "EnterRoundEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupEnterRoundEvent)
				if err := _Apigroup.contract.UnpackLog(event, "EnterRoundEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnterRoundEvent is a log parse operation binding the contract event 0xc27ed72edbb571182c3c5aa21b035674fc49c06957440f22d55f7e2bf00f3180.
//
// Solidity: event EnterRoundEvent(address _roundAddress, address _sender)
func (_Apigroup *ApigroupFilterer) ParseEnterRoundEvent(log types.Log) (*ApigroupEnterRoundEvent, error) {
	event := new(ApigroupEnterRoundEvent)
	if err := _Apigroup.contract.UnpackLog(event, "EnterRoundEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupLionDotaEventIterator is returned from FilterLionDotaEvent and is used to iterate over the raw logs and unpacked data for LionDotaEvent events raised by the Apigroup contract.
type ApigroupLionDotaEventIterator struct {
	Event *ApigroupLionDotaEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupLionDotaEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupLionDotaEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupLionDotaEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupLionDotaEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupLionDotaEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupLionDotaEvent represents a LionDotaEvent event raised by the Apigroup contract.
type ApigroupLionDotaEvent struct {
	NewLion *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterLionDotaEvent is a free log retrieval operation binding the contract event 0x825f09b67bda54c88567c9c5bd96e643eb3a7cc3062633742265ef44d499fc57.
//
// Solidity: event LionDotaEvent(uint256 newLion)
func (_Apigroup *ApigroupFilterer) FilterLionDotaEvent(opts *bind.FilterOpts) (*ApigroupLionDotaEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "LionDotaEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupLionDotaEventIterator{contract: _Apigroup.contract, event: "LionDotaEvent", logs: logs, sub: sub}, nil
}

// WatchLionDotaEvent is a free log subscription operation binding the contract event 0x825f09b67bda54c88567c9c5bd96e643eb3a7cc3062633742265ef44d499fc57.
//
// Solidity: event LionDotaEvent(uint256 newLion)
func (_Apigroup *ApigroupFilterer) WatchLionDotaEvent(opts *bind.WatchOpts, sink chan<- *ApigroupLionDotaEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "LionDotaEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupLionDotaEvent)
				if err := _Apigroup.contract.UnpackLog(event, "LionDotaEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLionDotaEvent is a log parse operation binding the contract event 0x825f09b67bda54c88567c9c5bd96e643eb3a7cc3062633742265ef44d499fc57.
//
// Solidity: event LionDotaEvent(uint256 newLion)
func (_Apigroup *ApigroupFilterer) ParseLionDotaEvent(log types.Log) (*ApigroupLionDotaEvent, error) {
	event := new(ApigroupLionDotaEvent)
	if err := _Apigroup.contract.UnpackLog(event, "LionDotaEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupNewLotEventIterator is returned from FilterNewLotEvent and is used to iterate over the raw logs and unpacked data for NewLotEvent events raised by the Apigroup contract.
type ApigroupNewLotEventIterator struct {
	Event *ApigroupNewLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupNewLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupNewLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupNewLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupNewLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupNewLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupNewLotEvent represents a NewLotEvent event raised by the Apigroup contract.
type ApigroupNewLotEvent struct {
	RoundAddress common.Address
	LotAddr      common.Address
	Owner        common.Address
	TimeFirst    *big.Int
	TimeSecond   *big.Int
	Price        *big.Int
	Val          *big.Int
	LotSnap      *big.Int
	Bsnap        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterNewLotEvent is a free log retrieval operation binding the contract event 0x0ec6421e5db42f49d5bc9b51a59d5babed4e72573d1b56303b98a9496e3be021.
//
// Solidity: event NewLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _timeFirst, uint256 _timeSecond, uint256 _price, uint256 _val, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) FilterNewLotEvent(opts *bind.FilterOpts) (*ApigroupNewLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "NewLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupNewLotEventIterator{contract: _Apigroup.contract, event: "NewLotEvent", logs: logs, sub: sub}, nil
}

// WatchNewLotEvent is a free log subscription operation binding the contract event 0x0ec6421e5db42f49d5bc9b51a59d5babed4e72573d1b56303b98a9496e3be021.
//
// Solidity: event NewLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _timeFirst, uint256 _timeSecond, uint256 _price, uint256 _val, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) WatchNewLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupNewLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "NewLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupNewLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "NewLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewLotEvent is a log parse operation binding the contract event 0x0ec6421e5db42f49d5bc9b51a59d5babed4e72573d1b56303b98a9496e3be021.
//
// Solidity: event NewLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _timeFirst, uint256 _timeSecond, uint256 _price, uint256 _val, uint256 _lotSnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) ParseNewLotEvent(log types.Log) (*ApigroupNewLotEvent, error) {
	event := new(ApigroupNewLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "NewLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupPickEventIterator is returned from FilterPickEvent and is used to iterate over the raw logs and unpacked data for PickEvent events raised by the Apigroup contract.
type ApigroupPickEventIterator struct {
	Event *ApigroupPickEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupPickEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupPickEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupPickEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupPickEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupPickEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupPickEvent represents a PickEvent event raised by the Apigroup contract.
type ApigroupPickEvent struct {
	Msg string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPickEvent is a free log retrieval operation binding the contract event 0x3ef4d8d899911e69f27397d4db19bb259ed769f9798e11e8f99c3bcf32348f1c.
//
// Solidity: event PickEvent(string _msg)
func (_Apigroup *ApigroupFilterer) FilterPickEvent(opts *bind.FilterOpts) (*ApigroupPickEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "PickEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupPickEventIterator{contract: _Apigroup.contract, event: "PickEvent", logs: logs, sub: sub}, nil
}

// WatchPickEvent is a free log subscription operation binding the contract event 0x3ef4d8d899911e69f27397d4db19bb259ed769f9798e11e8f99c3bcf32348f1c.
//
// Solidity: event PickEvent(string _msg)
func (_Apigroup *ApigroupFilterer) WatchPickEvent(opts *bind.WatchOpts, sink chan<- *ApigroupPickEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "PickEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupPickEvent)
				if err := _Apigroup.contract.UnpackLog(event, "PickEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePickEvent is a log parse operation binding the contract event 0x3ef4d8d899911e69f27397d4db19bb259ed769f9798e11e8f99c3bcf32348f1c.
//
// Solidity: event PickEvent(string _msg)
func (_Apigroup *ApigroupFilterer) ParsePickEvent(log types.Log) (*ApigroupPickEvent, error) {
	event := new(ApigroupPickEvent)
	if err := _Apigroup.contract.UnpackLog(event, "PickEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupReceiveLotEventIterator is returned from FilterReceiveLotEvent and is used to iterate over the raw logs and unpacked data for ReceiveLotEvent events raised by the Apigroup contract.
type ApigroupReceiveLotEventIterator struct {
	Event *ApigroupReceiveLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupReceiveLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupReceiveLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupReceiveLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupReceiveLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupReceiveLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupReceiveLotEvent represents a ReceiveLotEvent event raised by the Apigroup contract.
type ApigroupReceiveLotEvent struct {
	RoundAddress common.Address
	LotAddr      common.Address
	Owner        common.Address
	Balance      *big.Int
	SposDelta    *big.Int
	SnegDelta    *big.Int
	Psnap        *big.Int
	Bsnap        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterReceiveLotEvent is a free log retrieval operation binding the contract event 0xf961f8b2e1723623c5ae736a74446f0a5b8b0d68f8e42035a217e011b9543fb9.
//
// Solidity: event ReceiveLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _balance, uint256 _SposDelta, uint256 _SnegDelta, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) FilterReceiveLotEvent(opts *bind.FilterOpts) (*ApigroupReceiveLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "ReceiveLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupReceiveLotEventIterator{contract: _Apigroup.contract, event: "ReceiveLotEvent", logs: logs, sub: sub}, nil
}

// WatchReceiveLotEvent is a free log subscription operation binding the contract event 0xf961f8b2e1723623c5ae736a74446f0a5b8b0d68f8e42035a217e011b9543fb9.
//
// Solidity: event ReceiveLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _balance, uint256 _SposDelta, uint256 _SnegDelta, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) WatchReceiveLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupReceiveLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "ReceiveLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupReceiveLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "ReceiveLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceiveLotEvent is a log parse operation binding the contract event 0xf961f8b2e1723623c5ae736a74446f0a5b8b0d68f8e42035a217e011b9543fb9.
//
// Solidity: event ReceiveLotEvent(address _roundAddress, address _lotAddr, address _owner, uint256 _balance, uint256 _SposDelta, uint256 _SnegDelta, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) ParseReceiveLotEvent(log types.Log) (*ApigroupReceiveLotEvent, error) {
	event := new(ApigroupReceiveLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "ReceiveLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupSendLotEventIterator is returned from FilterSendLotEvent and is used to iterate over the raw logs and unpacked data for SendLotEvent events raised by the Apigroup contract.
type ApigroupSendLotEventIterator struct {
	Event *ApigroupSendLotEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupSendLotEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupSendLotEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupSendLotEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupSendLotEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupSendLotEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupSendLotEvent represents a SendLotEvent event raised by the Apigroup contract.
type ApigroupSendLotEvent struct {
	RoundAddress  common.Address
	LotAddr       common.Address
	ReceiveTokens *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSendLotEvent is a free log retrieval operation binding the contract event 0x7c63f4ca5f3947a628e97b9822a09acf9382a1c3916ccbf7493097dc2f081ecf.
//
// Solidity: event SendLotEvent(address _roundAddress, address _lotAddr, uint256 _receiveTokens)
func (_Apigroup *ApigroupFilterer) FilterSendLotEvent(opts *bind.FilterOpts) (*ApigroupSendLotEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "SendLotEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupSendLotEventIterator{contract: _Apigroup.contract, event: "SendLotEvent", logs: logs, sub: sub}, nil
}

// WatchSendLotEvent is a free log subscription operation binding the contract event 0x7c63f4ca5f3947a628e97b9822a09acf9382a1c3916ccbf7493097dc2f081ecf.
//
// Solidity: event SendLotEvent(address _roundAddress, address _lotAddr, uint256 _receiveTokens)
func (_Apigroup *ApigroupFilterer) WatchSendLotEvent(opts *bind.WatchOpts, sink chan<- *ApigroupSendLotEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "SendLotEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupSendLotEvent)
				if err := _Apigroup.contract.UnpackLog(event, "SendLotEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendLotEvent is a log parse operation binding the contract event 0x7c63f4ca5f3947a628e97b9822a09acf9382a1c3916ccbf7493097dc2f081ecf.
//
// Solidity: event SendLotEvent(address _roundAddress, address _lotAddr, uint256 _receiveTokens)
func (_Apigroup *ApigroupFilterer) ParseSendLotEvent(log types.Log) (*ApigroupSendLotEvent, error) {
	event := new(ApigroupSendLotEvent)
	if err := _Apigroup.contract.UnpackLog(event, "SendLotEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupStartRoundEventIterator is returned from FilterStartRoundEvent and is used to iterate over the raw logs and unpacked data for StartRoundEvent events raised by the Apigroup contract.
type ApigroupStartRoundEventIterator struct {
	Event *ApigroupStartRoundEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupStartRoundEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupStartRoundEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupStartRoundEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupStartRoundEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupStartRoundEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupStartRoundEvent represents a StartRoundEvent event raised by the Apigroup contract.
type ApigroupStartRoundEvent struct {
	RoundAddress common.Address
	Bsnap        *big.Int
	Psnap        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStartRoundEvent is a free log retrieval operation binding the contract event 0x87d0d34a259a5bf664a28dc7fdadc47f8abc8fe0f896b1356c050f6d5773418c.
//
// Solidity: event StartRoundEvent(address _roundAddress, uint256 _bsnap, uint256 _psnap)
func (_Apigroup *ApigroupFilterer) FilterStartRoundEvent(opts *bind.FilterOpts) (*ApigroupStartRoundEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "StartRoundEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupStartRoundEventIterator{contract: _Apigroup.contract, event: "StartRoundEvent", logs: logs, sub: sub}, nil
}

// WatchStartRoundEvent is a free log subscription operation binding the contract event 0x87d0d34a259a5bf664a28dc7fdadc47f8abc8fe0f896b1356c050f6d5773418c.
//
// Solidity: event StartRoundEvent(address _roundAddress, uint256 _bsnap, uint256 _psnap)
func (_Apigroup *ApigroupFilterer) WatchStartRoundEvent(opts *bind.WatchOpts, sink chan<- *ApigroupStartRoundEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "StartRoundEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupStartRoundEvent)
				if err := _Apigroup.contract.UnpackLog(event, "StartRoundEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStartRoundEvent is a log parse operation binding the contract event 0x87d0d34a259a5bf664a28dc7fdadc47f8abc8fe0f896b1356c050f6d5773418c.
//
// Solidity: event StartRoundEvent(address _roundAddress, uint256 _bsnap, uint256 _psnap)
func (_Apigroup *ApigroupFilterer) ParseStartRoundEvent(log types.Log) (*ApigroupStartRoundEvent, error) {
	event := new(ApigroupStartRoundEvent)
	if err := _Apigroup.contract.UnpackLog(event, "StartRoundEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupUpdatePlayerParamsIterator is returned from FilterUpdatePlayerParams and is used to iterate over the raw logs and unpacked data for UpdatePlayerParams events raised by the Apigroup contract.
type ApigroupUpdatePlayerParamsIterator struct {
	Event *ApigroupUpdatePlayerParams // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupUpdatePlayerParamsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupUpdatePlayerParams)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupUpdatePlayerParams)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupUpdatePlayerParamsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupUpdatePlayerParamsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupUpdatePlayerParams represents a UpdatePlayerParams event raised by the Apigroup contract.
type ApigroupUpdatePlayerParams struct {
	RoundAddress common.Address
	Owner        common.Address
	Nwin         *big.Int
	N            *big.Int
	Spos         *big.Int
	Sneg         *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterUpdatePlayerParams is a free log retrieval operation binding the contract event 0x549bf9b2e230d5c7984eceaafcffe0407f05426c6cc61641bad8e2cd415ff461.
//
// Solidity: event UpdatePlayerParams(address _roundAddress, address _owner, uint256 _nwin, uint256 _n, uint256 _spos, uint256 _sneg)
func (_Apigroup *ApigroupFilterer) FilterUpdatePlayerParams(opts *bind.FilterOpts) (*ApigroupUpdatePlayerParamsIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "UpdatePlayerParams")
	if err != nil {
		return nil, err
	}
	return &ApigroupUpdatePlayerParamsIterator{contract: _Apigroup.contract, event: "UpdatePlayerParams", logs: logs, sub: sub}, nil
}

// WatchUpdatePlayerParams is a free log subscription operation binding the contract event 0x549bf9b2e230d5c7984eceaafcffe0407f05426c6cc61641bad8e2cd415ff461.
//
// Solidity: event UpdatePlayerParams(address _roundAddress, address _owner, uint256 _nwin, uint256 _n, uint256 _spos, uint256 _sneg)
func (_Apigroup *ApigroupFilterer) WatchUpdatePlayerParams(opts *bind.WatchOpts, sink chan<- *ApigroupUpdatePlayerParams) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "UpdatePlayerParams")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupUpdatePlayerParams)
				if err := _Apigroup.contract.UnpackLog(event, "UpdatePlayerParams", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdatePlayerParams is a log parse operation binding the contract event 0x549bf9b2e230d5c7984eceaafcffe0407f05426c6cc61641bad8e2cd415ff461.
//
// Solidity: event UpdatePlayerParams(address _roundAddress, address _owner, uint256 _nwin, uint256 _n, uint256 _spos, uint256 _sneg)
func (_Apigroup *ApigroupFilterer) ParseUpdatePlayerParams(log types.Log) (*ApigroupUpdatePlayerParams, error) {
	event := new(ApigroupUpdatePlayerParams)
	if err := _Apigroup.contract.UnpackLog(event, "UpdatePlayerParams", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApigroupWithdrawEventIterator is returned from FilterWithdrawEvent and is used to iterate over the raw logs and unpacked data for WithdrawEvent events raised by the Apigroup contract.
type ApigroupWithdrawEventIterator struct {
	Event *ApigroupWithdrawEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApigroupWithdrawEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApigroupWithdrawEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApigroupWithdrawEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApigroupWithdrawEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApigroupWithdrawEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApigroupWithdrawEvent represents a WithdrawEvent event raised by the Apigroup contract.
type ApigroupWithdrawEvent struct {
	Sender common.Address
	Psnap  *big.Int
	Bsnap  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawEvent is a free log retrieval operation binding the contract event 0x5bb95829671915ece371da722f91d5371159095dcabf2f75cd6c53facb7e1bab.
//
// Solidity: event WithdrawEvent(address _sender, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) FilterWithdrawEvent(opts *bind.FilterOpts) (*ApigroupWithdrawEventIterator, error) {

	logs, sub, err := _Apigroup.contract.FilterLogs(opts, "WithdrawEvent")
	if err != nil {
		return nil, err
	}
	return &ApigroupWithdrawEventIterator{contract: _Apigroup.contract, event: "WithdrawEvent", logs: logs, sub: sub}, nil
}

// WatchWithdrawEvent is a free log subscription operation binding the contract event 0x5bb95829671915ece371da722f91d5371159095dcabf2f75cd6c53facb7e1bab.
//
// Solidity: event WithdrawEvent(address _sender, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) WatchWithdrawEvent(opts *bind.WatchOpts, sink chan<- *ApigroupWithdrawEvent) (event.Subscription, error) {

	logs, sub, err := _Apigroup.contract.WatchLogs(opts, "WithdrawEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApigroupWithdrawEvent)
				if err := _Apigroup.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawEvent is a log parse operation binding the contract event 0x5bb95829671915ece371da722f91d5371159095dcabf2f75cd6c53facb7e1bab.
//
// Solidity: event WithdrawEvent(address _sender, uint256 _psnap, uint256 _bsnap)
func (_Apigroup *ApigroupFilterer) ParseWithdrawEvent(log types.Log) (*ApigroupWithdrawEvent, error) {
	event := new(ApigroupWithdrawEvent)
	if err := _Apigroup.contract.UnpackLog(event, "WithdrawEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
